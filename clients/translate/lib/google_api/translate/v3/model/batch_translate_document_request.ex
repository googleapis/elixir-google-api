# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Translate.V3.Model.BatchTranslateDocumentRequest do
  @moduledoc """
  The BatchTranslateDocument request.

  ## Attributes

  *   `formatConversions` (*type:* `map()`, *default:* `nil`) - Optional.
  *   `glossaries` (*type:* `%{optional(String.t) => GoogleApi.Translate.V3.Model.TranslateTextGlossaryConfig.t}`, *default:* `nil`) - Optional. Glossaries to be applied. It's keyed by target language code.
  *   `inputConfigs` (*type:* `list(GoogleApi.Translate.V3.Model.BatchDocumentInputConfig.t)`, *default:* `nil`) - Required. Input configurations. The total number of files matched should be <= 100. The total content size to translate should be <= 100M Unicode codepoints. The files must use UTF-8 encoding.
  *   `models` (*type:* `map()`, *default:* `nil`) - Optional. The models to use for translation. Map's key is target language code. Map's value is the model name. Value can be a built-in general model, or an AutoML Translation model. The value format depends on model type: - AutoML Translation models: `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}` - General (built-in) models: `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`, If the map is empty or a specific model is not requested for a language pair, then default google model (nmt) is used.
  *   `outputConfig` (*type:* `GoogleApi.Translate.V3.Model.BatchDocumentOutputConfig.t`, *default:* `nil`) - Required. Output configuration. If 2 input configs match to the same file (that is, same input path), we don't generate output for duplicate inputs.
  *   `sourceLanguageCode` (*type:* `String.t`, *default:* `nil`) - Required. The BCP-47 language code of the input document if known, for example, "en-US" or "sr-Latn". Supported language codes are listed in Language Support (https://cloud.google.com/translate/docs/languages).
  *   `targetLanguageCodes` (*type:* `list(String.t)`, *default:* `nil`) - Required. The BCP-47 language code to use for translation of the input document. Specify up to 10 language codes here.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :formatConversions => map() | nil,
          :glossaries =>
            %{
              optional(String.t()) => GoogleApi.Translate.V3.Model.TranslateTextGlossaryConfig.t()
            }
            | nil,
          :inputConfigs => list(GoogleApi.Translate.V3.Model.BatchDocumentInputConfig.t()) | nil,
          :models => map() | nil,
          :outputConfig => GoogleApi.Translate.V3.Model.BatchDocumentOutputConfig.t() | nil,
          :sourceLanguageCode => String.t() | nil,
          :targetLanguageCodes => list(String.t()) | nil
        }

  field(:formatConversions, type: :map)
  field(:glossaries, as: GoogleApi.Translate.V3.Model.TranslateTextGlossaryConfig, type: :map)
  field(:inputConfigs, as: GoogleApi.Translate.V3.Model.BatchDocumentInputConfig, type: :list)
  field(:models, type: :map)
  field(:outputConfig, as: GoogleApi.Translate.V3.Model.BatchDocumentOutputConfig)
  field(:sourceLanguageCode)
  field(:targetLanguageCodes, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.Translate.V3.Model.BatchTranslateDocumentRequest do
  def decode(value, options) do
    GoogleApi.Translate.V3.Model.BatchTranslateDocumentRequest.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Translate.V3.Model.BatchTranslateDocumentRequest do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
