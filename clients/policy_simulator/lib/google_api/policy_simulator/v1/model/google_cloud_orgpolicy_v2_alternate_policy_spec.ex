# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.PolicySimulator.V1.Model.GoogleCloudOrgpolicyV2AlternatePolicySpec do
  @moduledoc """
  Similar to PolicySpec but with an extra 'launch' field for launch reference. The PolicySpec here is specific for dry-run.

  ## Attributes

  *   `launch` (*type:* `String.t`, *default:* `nil`) - Reference to the launch that will be used while audit logging and to control the launch. Should be set only in the alternate policy.
  *   `spec` (*type:* `GoogleApi.PolicySimulator.V1.Model.GoogleCloudOrgpolicyV2PolicySpec.t`, *default:* `nil`) - Specify constraint for configurations of Google Cloud resources.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :launch => String.t() | nil,
          :spec => GoogleApi.PolicySimulator.V1.Model.GoogleCloudOrgpolicyV2PolicySpec.t() | nil
        }

  field(:launch)
  field(:spec, as: GoogleApi.PolicySimulator.V1.Model.GoogleCloudOrgpolicyV2PolicySpec)
end

defimpl Poison.Decoder,
  for: GoogleApi.PolicySimulator.V1.Model.GoogleCloudOrgpolicyV2AlternatePolicySpec do
  def decode(value, options) do
    GoogleApi.PolicySimulator.V1.Model.GoogleCloudOrgpolicyV2AlternatePolicySpec.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.PolicySimulator.V1.Model.GoogleCloudOrgpolicyV2AlternatePolicySpec do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
