# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.PolicySimulator.V1.Model.GoogleCloudPolicysimulatorV1ReplayResultsSummary do
  @moduledoc """
  Summary statistics about the replayed log entries.

  ## Attributes

  *   `differenceCount` (*type:* `integer()`, *default:* `nil`) - The number of replayed log entries with a difference between baseline and simulated policies.
  *   `errorCount` (*type:* `integer()`, *default:* `nil`) - The number of log entries that could not be replayed.
  *   `logCount` (*type:* `integer()`, *default:* `nil`) - The total number of log entries replayed.
  *   `newestDate` (*type:* `GoogleApi.PolicySimulator.V1.Model.GoogleTypeDate.t`, *default:* `nil`) - The date of the newest log entry replayed.
  *   `oldestDate` (*type:* `GoogleApi.PolicySimulator.V1.Model.GoogleTypeDate.t`, *default:* `nil`) - The date of the oldest log entry replayed.
  *   `unchangedCount` (*type:* `integer()`, *default:* `nil`) - The number of replayed log entries with no difference between baseline and simulated policies.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :differenceCount => integer() | nil,
          :errorCount => integer() | nil,
          :logCount => integer() | nil,
          :newestDate => GoogleApi.PolicySimulator.V1.Model.GoogleTypeDate.t() | nil,
          :oldestDate => GoogleApi.PolicySimulator.V1.Model.GoogleTypeDate.t() | nil,
          :unchangedCount => integer() | nil
        }

  field(:differenceCount)
  field(:errorCount)
  field(:logCount)
  field(:newestDate, as: GoogleApi.PolicySimulator.V1.Model.GoogleTypeDate)
  field(:oldestDate, as: GoogleApi.PolicySimulator.V1.Model.GoogleTypeDate)
  field(:unchangedCount)
end

defimpl Poison.Decoder,
  for: GoogleApi.PolicySimulator.V1.Model.GoogleCloudPolicysimulatorV1ReplayResultsSummary do
  def decode(value, options) do
    GoogleApi.PolicySimulator.V1.Model.GoogleCloudPolicysimulatorV1ReplayResultsSummary.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.PolicySimulator.V1.Model.GoogleCloudPolicysimulatorV1ReplayResultsSummary do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
