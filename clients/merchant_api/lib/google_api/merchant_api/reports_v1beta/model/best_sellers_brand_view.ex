# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.MerchantAPI.Reports_v1beta.Model.BestSellersBrandView do
  @moduledoc """
  Fields available for query in `best_sellers_brand_view` table. [Best sellers](https://support.google.com/merchants/answer/9488679) report with top brands. Values are only set for fields requested explicitly in the request's search query.

  ## Attributes

  *   `brand` (*type:* `String.t`, *default:* `nil`) - Name of the brand.
  *   `previousRank` (*type:* `String.t`, *default:* `nil`) - Popularity rank in the previous week or month.
  *   `previousRelativeDemand` (*type:* `String.t`, *default:* `nil`) - Estimated demand in relation to the brand with the highest popularity rank in the same category and country in the previous week or month.
  *   `rank` (*type:* `String.t`, *default:* `nil`) - Popularity of the brand on Ads and organic surfaces, in the selected category and country, based on the estimated number of units sold.
  *   `relativeDemand` (*type:* `String.t`, *default:* `nil`) - Estimated demand in relation to the brand with the highest popularity rank in the same category and country.
  *   `relativeDemandChange` (*type:* `String.t`, *default:* `nil`) - Change in the estimated demand. Whether it rose, sank or remained flat.
  *   `reportCategoryId` (*type:* `String.t`, *default:* `nil`) - Google product category ID to calculate the ranking for, represented in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436). Required in the `SELECT` clause. If a `WHERE` condition on `report_category_id` is not specified in the query, rankings for all top-level categories are returned.
  *   `reportCountryCode` (*type:* `String.t`, *default:* `nil`) - Country where the ranking is calculated. Represented in the ISO 3166 format. Required in the `SELECT` clause. Condition on `report_country_code` is required in the `WHERE` clause.
  *   `reportDate` (*type:* `GoogleApi.MerchantAPI.Reports_v1beta.Model.Date.t`, *default:* `nil`) - Report date. The value of this field can only be one of the following: * The first day of the week (Monday) for weekly reports, * The first day of the month for monthly reports. Required in the `SELECT` clause. If a `WHERE` condition on `report_date` is not specified in the query, the latest available weekly or monthly report is returned.
  *   `reportGranularity` (*type:* `String.t`, *default:* `nil`) - Granularity of the report. The ranking can be done over a week or a month timeframe. Required in the `SELECT` clause. Condition on `report_granularity` is required in the `WHERE` clause.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :brand => String.t() | nil,
          :previousRank => String.t() | nil,
          :previousRelativeDemand => String.t() | nil,
          :rank => String.t() | nil,
          :relativeDemand => String.t() | nil,
          :relativeDemandChange => String.t() | nil,
          :reportCategoryId => String.t() | nil,
          :reportCountryCode => String.t() | nil,
          :reportDate => GoogleApi.MerchantAPI.Reports_v1beta.Model.Date.t() | nil,
          :reportGranularity => String.t() | nil
        }

  field(:brand)
  field(:previousRank)
  field(:previousRelativeDemand)
  field(:rank)
  field(:relativeDemand)
  field(:relativeDemandChange)
  field(:reportCategoryId)
  field(:reportCountryCode)
  field(:reportDate, as: GoogleApi.MerchantAPI.Reports_v1beta.Model.Date)
  field(:reportGranularity)
end

defimpl Poison.Decoder, for: GoogleApi.MerchantAPI.Reports_v1beta.Model.BestSellersBrandView do
  def decode(value, options) do
    GoogleApi.MerchantAPI.Reports_v1beta.Model.BestSellersBrandView.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.MerchantAPI.Reports_v1beta.Model.BestSellersBrandView do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
