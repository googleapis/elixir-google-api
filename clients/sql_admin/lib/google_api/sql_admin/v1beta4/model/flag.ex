# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.SQLAdmin.V1beta4.Model.Flag do
  @moduledoc """
  A flag resource.

  ## Attributes

  *   `allowedIntValues` (*type:* `list(String.t)`, *default:* `nil`) - Use this field if only certain integers are accepted. Can be combined with min_value and max_value to add additional values.
  *   `allowedStringValues` (*type:* `list(String.t)`, *default:* `nil`) - For `STRING` flags, a list of strings that the value can be set to.
  *   `appliesTo` (*type:* `list(String.t)`, *default:* `nil`) - The database version this flag applies to. Can be MySQL instances: `MYSQL_8_0`, `MYSQL_8_0_18`, `MYSQL_8_0_26`, `MYSQL_5_7`, or `MYSQL_5_6`. PostgreSQL instances: `POSTGRES_9_6`, `POSTGRES_10`, `POSTGRES_11` or `POSTGRES_12`. SQL Server instances: `SQLSERVER_2017_STANDARD`, `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`, `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`, or `SQLSERVER_2019_WEB`. See [the complete list](/sql/docs/mysql/admin-api/rest/v1/SqlDatabaseVersion).
  *   `flagScope` (*type:* `String.t`, *default:* `nil`) - Scope of flag.
  *   `inBeta` (*type:* `boolean()`, *default:* `nil`) - Whether or not the flag is considered in beta.
  *   `kind` (*type:* `String.t`, *default:* `nil`) - This is always `sql#flag`.
  *   `maxValue` (*type:* `String.t`, *default:* `nil`) - For `INTEGER` flags, the maximum allowed value.
  *   `minValue` (*type:* `String.t`, *default:* `nil`) - For `INTEGER` flags, the minimum allowed value.
  *   `name` (*type:* `String.t`, *default:* `nil`) - This is the name of the flag. Flag names always use underscores, not hyphens, for example: `max_allowed_packet`
  *   `recommendedIntValue` (*type:* `String.t`, *default:* `nil`) - Recommended flag value in integer format for UI display.
  *   `recommendedStringValue` (*type:* `String.t`, *default:* `nil`) - Recommended flag value in string format for UI display.
  *   `requiresRestart` (*type:* `boolean()`, *default:* `nil`) - Indicates whether changing this flag will trigger a database restart. Only applicable to Second Generation instances.
  *   `type` (*type:* `String.t`, *default:* `nil`) - The type of the flag. Flags are typed to being `BOOLEAN`, `STRING`, `INTEGER` or `NONE`. `NONE` is used for flags which do not take a value, such as `skip_grant_tables`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :allowedIntValues => list(String.t()) | nil,
          :allowedStringValues => list(String.t()) | nil,
          :appliesTo => list(String.t()) | nil,
          :flagScope => String.t() | nil,
          :inBeta => boolean() | nil,
          :kind => String.t() | nil,
          :maxValue => String.t() | nil,
          :minValue => String.t() | nil,
          :name => String.t() | nil,
          :recommendedIntValue => String.t() | nil,
          :recommendedStringValue => String.t() | nil,
          :requiresRestart => boolean() | nil,
          :type => String.t() | nil
        }

  field(:allowedIntValues, type: :list)
  field(:allowedStringValues, type: :list)
  field(:appliesTo, type: :list)
  field(:flagScope)
  field(:inBeta)
  field(:kind)
  field(:maxValue)
  field(:minValue)
  field(:name)
  field(:recommendedIntValue)
  field(:recommendedStringValue)
  field(:requiresRestart)
  field(:type)
end

defimpl Poison.Decoder, for: GoogleApi.SQLAdmin.V1beta4.Model.Flag do
  def decode(value, options) do
    GoogleApi.SQLAdmin.V1beta4.Model.Flag.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.SQLAdmin.V1beta4.Model.Flag do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
