# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.SQLAdmin.V1beta4.Model.ExportContextTdeExportOptions do
  @moduledoc """
  Optional. Export parameters specific to SQL Server TDE certificates

  ## Attributes

  *   `certificatePath` (*type:* `String.t`, *default:* `nil`) - Required. Path to the TDE certificate public key in the form gs://bucketName/fileName. The instance must have write access to the location. Applicable only for SQL Server instances.
  *   `name` (*type:* `String.t`, *default:* `nil`) - Required. Certificate name. Applicable only for SQL Server instances.
  *   `privateKeyPassword` (*type:* `String.t`, *default:* `nil`) - Required. Password that encrypts the private key.
  *   `privateKeyPath` (*type:* `String.t`, *default:* `nil`) - Required. Path to the TDE certificate private key in the form gs://bucketName/fileName. The instance must have write access to the location. Applicable only for SQL Server instances.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :certificatePath => String.t() | nil,
          :name => String.t() | nil,
          :privateKeyPassword => String.t() | nil,
          :privateKeyPath => String.t() | nil
        }

  field(:certificatePath)
  field(:name)
  field(:privateKeyPassword)
  field(:privateKeyPath)
end

defimpl Poison.Decoder, for: GoogleApi.SQLAdmin.V1beta4.Model.ExportContextTdeExportOptions do
  def decode(value, options) do
    GoogleApi.SQLAdmin.V1beta4.Model.ExportContextTdeExportOptions.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.SQLAdmin.V1beta4.Model.ExportContextTdeExportOptions do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
