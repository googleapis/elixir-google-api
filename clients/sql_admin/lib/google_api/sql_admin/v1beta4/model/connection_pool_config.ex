# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.SQLAdmin.V1beta4.Model.ConnectionPoolConfig do
  @moduledoc """
  The managed connection pooling configuration.

  ## Attributes

  *   `clientConnectionIdleTimeout` (*type:* `String.t`, *default:* `nil`) - Client idle timeout.
  *   `connPoolSize` (*type:* `integer()`, *default:* `nil`) - Managed connection pool size.
  *   `connectionPoolingEnabled` (*type:* `boolean()`, *default:* `nil`) - Whether managed connection pooling is enabled.
  *   `flags` (*type:* `list(GoogleApi.SQLAdmin.V1beta4.Model.ConnectionPoolFlags.t)`, *default:* `nil`) - Optional. List of connection pool configuration flags
  *   `maxClientConnections` (*type:* `integer()`, *default:* `nil`) - Maximum number of client connections in connection pool.
  *   `poolMode` (*type:* `String.t`, *default:* `nil`) - The managed connection pool mode for the instance.
  *   `queryWaitTimeout` (*type:* `String.t`, *default:* `nil`) - Query wait timeout.
  *   `serverConnectionIdleTimeout` (*type:* `String.t`, *default:* `nil`) - Server idle timeout.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :clientConnectionIdleTimeout => String.t() | nil,
          :connPoolSize => integer() | nil,
          :connectionPoolingEnabled => boolean() | nil,
          :flags => list(GoogleApi.SQLAdmin.V1beta4.Model.ConnectionPoolFlags.t()) | nil,
          :maxClientConnections => integer() | nil,
          :poolMode => String.t() | nil,
          :queryWaitTimeout => String.t() | nil,
          :serverConnectionIdleTimeout => String.t() | nil
        }

  field(:clientConnectionIdleTimeout)
  field(:connPoolSize)
  field(:connectionPoolingEnabled)
  field(:flags, as: GoogleApi.SQLAdmin.V1beta4.Model.ConnectionPoolFlags, type: :list)
  field(:maxClientConnections)
  field(:poolMode)
  field(:queryWaitTimeout)
  field(:serverConnectionIdleTimeout)
end

defimpl Poison.Decoder, for: GoogleApi.SQLAdmin.V1beta4.Model.ConnectionPoolConfig do
  def decode(value, options) do
    GoogleApi.SQLAdmin.V1beta4.Model.ConnectionPoolConfig.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.SQLAdmin.V1beta4.Model.ConnectionPoolConfig do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
