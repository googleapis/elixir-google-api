# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.OSConfig.V1.Model.OSPolicyAssignmentReportOSPolicyCompliance do
  @moduledoc """
  Compliance data for an OS policy

  ## Attributes

  *   `complianceState` (*type:* `String.t`, *default:* `nil`) - The compliance state of the OS policy.
  *   `complianceStateReason` (*type:* `String.t`, *default:* `nil`) - The reason for the OS policy to be in an unknown compliance state. This field is always populated when `compliance_state` is `UNKNOWN`. If populated, the field can contain one of the following values: * `vm-not-running`: The VM was not running. * `os-policies-not-supported-by-agent`: The version of the OS Config agent running on the VM does not support running OS policies. * `no-agent-detected`: The OS Config agent is not detected for the VM. * `resource-execution-errors`: The OS Config agent encountered errors while executing one or more resources in the policy. See `os_policy_resource_compliances` for details. * `task-timeout`: The task sent to the agent to apply the policy timed out. * `unexpected-agent-state`: The OS Config agent did not report the final status of the task that attempted to apply the policy. Instead, the agent unexpectedly started working on a different task. This mostly happens when the agent or VM unexpectedly restarts while applying OS policies. * `internal-service-errors`: Internal service errors were encountered while attempting to apply the policy. * `os-policy-execution-pending`: OS policy was assigned to the given VM, but was not executed yet. Typically this is a transient condition that will go away after the next policy execution cycle.
  *   `osPolicyId` (*type:* `String.t`, *default:* `nil`) - The OS policy id
  *   `osPolicyResourceCompliances` (*type:* `list(GoogleApi.OSConfig.V1.Model.OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.t)`, *default:* `nil`) - Compliance data for each resource within the policy that is applied to the VM.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :complianceState => String.t() | nil,
          :complianceStateReason => String.t() | nil,
          :osPolicyId => String.t() | nil,
          :osPolicyResourceCompliances =>
            list(
              GoogleApi.OSConfig.V1.Model.OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.t()
            )
            | nil
        }

  field(:complianceState)
  field(:complianceStateReason)
  field(:osPolicyId)

  field(:osPolicyResourceCompliances,
    as:
      GoogleApi.OSConfig.V1.Model.OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance,
    type: :list
  )
end

defimpl Poison.Decoder,
  for: GoogleApi.OSConfig.V1.Model.OSPolicyAssignmentReportOSPolicyCompliance do
  def decode(value, options) do
    GoogleApi.OSConfig.V1.Model.OSPolicyAssignmentReportOSPolicyCompliance.decode(value, options)
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.OSConfig.V1.Model.OSPolicyAssignmentReportOSPolicyCompliance do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
