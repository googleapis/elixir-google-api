# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Dataproc.V1.Model.ProvisioningModelMix do
  @moduledoc """
  Defines how Dataproc should create VMs with a mixture of provisioning models.

  ## Attributes

  *   `standardCapacityBase` (*type:* `integer()`, *default:* `nil`) - Optional. The base capacity that will always use Standard VMs to avoid risk of more preemption than the minimum capacity you need. Dataproc will create only standard VMs until it reaches standard_capacity_base, then it will start using standard_capacity_percent_above_base to mix Spot with Standard VMs. eg. If 15 instances are requested and standard_capacity_base is 5, Dataproc will create 5 standard VMs and then start mixing spot and standard VMs for remaining 10 instances.
  *   `standardCapacityPercentAboveBase` (*type:* `integer()`, *default:* `nil`) - Optional. The percentage of target capacity that should use Standard VM. The remaining percentage will use Spot VMs. The percentage applies only to the capacity above standard_capacity_base. eg. If 15 instances are requested and standard_capacity_base is 5 and standard_capacity_percent_above_base is 30, Dataproc will create 5 standard VMs and then start mixing spot and standard VMs for remaining 10 instances. The mix will be 30% standard and 70% spot.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :standardCapacityBase => integer() | nil,
          :standardCapacityPercentAboveBase => integer() | nil
        }

  field(:standardCapacityBase)
  field(:standardCapacityPercentAboveBase)
end

defimpl Poison.Decoder, for: GoogleApi.Dataproc.V1.Model.ProvisioningModelMix do
  def decode(value, options) do
    GoogleApi.Dataproc.V1.Model.ProvisioningModelMix.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Dataproc.V1.Model.ProvisioningModelMix do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
