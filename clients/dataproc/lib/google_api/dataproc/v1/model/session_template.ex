# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Dataproc.V1.Model.SessionTemplate do
  @moduledoc """
  A representation of a session template.

  ## Attributes

  *   `createTime` (*type:* `DateTime.t`, *default:* `nil`) - Output only. The time when the template was created.
  *   `creator` (*type:* `String.t`, *default:* `nil`) - Output only. The email address of the user who created the template.
  *   `description` (*type:* `String.t`, *default:* `nil`) - Optional. Brief description of the template.
  *   `environmentConfig` (*type:* `GoogleApi.Dataproc.V1.Model.EnvironmentConfig.t`, *default:* `nil`) - Optional. Environment configuration for session execution.
  *   `jupyterSession` (*type:* `GoogleApi.Dataproc.V1.Model.JupyterConfig.t`, *default:* `nil`) - Optional. Jupyter session config.
  *   `labels` (*type:* `map()`, *default:* `nil`) - Optional. Labels to associate with sessions created using this template. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values can be empty, but, if present, must contain 1 to 63 characters and conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a session.
  *   `name` (*type:* `String.t`, *default:* `nil`) - Required. The resource name of the session template.
  *   `runtimeConfig` (*type:* `GoogleApi.Dataproc.V1.Model.RuntimeConfig.t`, *default:* `nil`) - Optional. Runtime configuration for session execution.
  *   `sparkConnectSession` (*type:* `GoogleApi.Dataproc.V1.Model.SparkConnectConfig.t`, *default:* `nil`) - Optional. Spark connect session config.
  *   `updateTime` (*type:* `DateTime.t`, *default:* `nil`) - Output only. The time the template was last updated.
  *   `uuid` (*type:* `String.t`, *default:* `nil`) - Output only. A session template UUID (Unique Universal Identifier). The service generates this value when it creates the session template.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :createTime => DateTime.t() | nil,
          :creator => String.t() | nil,
          :description => String.t() | nil,
          :environmentConfig => GoogleApi.Dataproc.V1.Model.EnvironmentConfig.t() | nil,
          :jupyterSession => GoogleApi.Dataproc.V1.Model.JupyterConfig.t() | nil,
          :labels => map() | nil,
          :name => String.t() | nil,
          :runtimeConfig => GoogleApi.Dataproc.V1.Model.RuntimeConfig.t() | nil,
          :sparkConnectSession => GoogleApi.Dataproc.V1.Model.SparkConnectConfig.t() | nil,
          :updateTime => DateTime.t() | nil,
          :uuid => String.t() | nil
        }

  field(:createTime, as: DateTime)
  field(:creator)
  field(:description)
  field(:environmentConfig, as: GoogleApi.Dataproc.V1.Model.EnvironmentConfig)
  field(:jupyterSession, as: GoogleApi.Dataproc.V1.Model.JupyterConfig)
  field(:labels, type: :map)
  field(:name)
  field(:runtimeConfig, as: GoogleApi.Dataproc.V1.Model.RuntimeConfig)
  field(:sparkConnectSession, as: GoogleApi.Dataproc.V1.Model.SparkConnectConfig)
  field(:updateTime, as: DateTime)
  field(:uuid)
end

defimpl Poison.Decoder, for: GoogleApi.Dataproc.V1.Model.SessionTemplate do
  def decode(value, options) do
    GoogleApi.Dataproc.V1.Model.SessionTemplate.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Dataproc.V1.Model.SessionTemplate do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
