# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Dataproc.V1.Model.JobData do
  @moduledoc """
  Data corresponding to a spark job.

  ## Attributes

  *   `completionTime` (*type:* `DateTime.t`, *default:* `nil`) - 
  *   `description` (*type:* `String.t`, *default:* `nil`) - 
  *   `jobGroup` (*type:* `String.t`, *default:* `nil`) - 
  *   `jobId` (*type:* `String.t`, *default:* `nil`) - 
  *   `killTasksSummary` (*type:* `map()`, *default:* `nil`) - 
  *   `name` (*type:* `String.t`, *default:* `nil`) - 
  *   `numActiveStages` (*type:* `integer()`, *default:* `nil`) - 
  *   `numActiveTasks` (*type:* `integer()`, *default:* `nil`) - 
  *   `numCompletedIndices` (*type:* `integer()`, *default:* `nil`) - 
  *   `numCompletedStages` (*type:* `integer()`, *default:* `nil`) - 
  *   `numCompletedTasks` (*type:* `integer()`, *default:* `nil`) - 
  *   `numFailedStages` (*type:* `integer()`, *default:* `nil`) - 
  *   `numFailedTasks` (*type:* `integer()`, *default:* `nil`) - 
  *   `numKilledTasks` (*type:* `integer()`, *default:* `nil`) - 
  *   `numSkippedStages` (*type:* `integer()`, *default:* `nil`) - 
  *   `numSkippedTasks` (*type:* `integer()`, *default:* `nil`) - 
  *   `numTasks` (*type:* `integer()`, *default:* `nil`) - 
  *   `skippedStages` (*type:* `list(integer())`, *default:* `nil`) - 
  *   `sqlExecutionId` (*type:* `String.t`, *default:* `nil`) - 
  *   `stageIds` (*type:* `list(String.t)`, *default:* `nil`) - 
  *   `status` (*type:* `String.t`, *default:* `nil`) - 
  *   `submissionTime` (*type:* `DateTime.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :completionTime => DateTime.t() | nil,
          :description => String.t() | nil,
          :jobGroup => String.t() | nil,
          :jobId => String.t() | nil,
          :killTasksSummary => map() | nil,
          :name => String.t() | nil,
          :numActiveStages => integer() | nil,
          :numActiveTasks => integer() | nil,
          :numCompletedIndices => integer() | nil,
          :numCompletedStages => integer() | nil,
          :numCompletedTasks => integer() | nil,
          :numFailedStages => integer() | nil,
          :numFailedTasks => integer() | nil,
          :numKilledTasks => integer() | nil,
          :numSkippedStages => integer() | nil,
          :numSkippedTasks => integer() | nil,
          :numTasks => integer() | nil,
          :skippedStages => list(integer()) | nil,
          :sqlExecutionId => String.t() | nil,
          :stageIds => list(String.t()) | nil,
          :status => String.t() | nil,
          :submissionTime => DateTime.t() | nil
        }

  field(:completionTime, as: DateTime)
  field(:description)
  field(:jobGroup)
  field(:jobId)
  field(:killTasksSummary, type: :map)
  field(:name)
  field(:numActiveStages)
  field(:numActiveTasks)
  field(:numCompletedIndices)
  field(:numCompletedStages)
  field(:numCompletedTasks)
  field(:numFailedStages)
  field(:numFailedTasks)
  field(:numKilledTasks)
  field(:numSkippedStages)
  field(:numSkippedTasks)
  field(:numTasks)
  field(:skippedStages, type: :list)
  field(:sqlExecutionId)
  field(:stageIds, type: :list)
  field(:status)
  field(:submissionTime, as: DateTime)
end

defimpl Poison.Decoder, for: GoogleApi.Dataproc.V1.Model.JobData do
  def decode(value, options) do
    GoogleApi.Dataproc.V1.Model.JobData.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Dataproc.V1.Model.JobData do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
