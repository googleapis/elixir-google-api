# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Dataproc.V1.Model.RddDataDistribution do
  @moduledoc """
  Details about RDD usage.

  ## Attributes

  *   `address` (*type:* `String.t`, *default:* `nil`) - 
  *   `diskUsed` (*type:* `String.t`, *default:* `nil`) - 
  *   `memoryRemaining` (*type:* `String.t`, *default:* `nil`) - 
  *   `memoryUsed` (*type:* `String.t`, *default:* `nil`) - 
  *   `offHeapMemoryRemaining` (*type:* `String.t`, *default:* `nil`) - 
  *   `offHeapMemoryUsed` (*type:* `String.t`, *default:* `nil`) - 
  *   `onHeapMemoryRemaining` (*type:* `String.t`, *default:* `nil`) - 
  *   `onHeapMemoryUsed` (*type:* `String.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :address => String.t() | nil,
          :diskUsed => String.t() | nil,
          :memoryRemaining => String.t() | nil,
          :memoryUsed => String.t() | nil,
          :offHeapMemoryRemaining => String.t() | nil,
          :offHeapMemoryUsed => String.t() | nil,
          :onHeapMemoryRemaining => String.t() | nil,
          :onHeapMemoryUsed => String.t() | nil
        }

  field(:address)
  field(:diskUsed)
  field(:memoryRemaining)
  field(:memoryUsed)
  field(:offHeapMemoryRemaining)
  field(:offHeapMemoryUsed)
  field(:onHeapMemoryRemaining)
  field(:onHeapMemoryUsed)
end

defimpl Poison.Decoder, for: GoogleApi.Dataproc.V1.Model.RddDataDistribution do
  def decode(value, options) do
    GoogleApi.Dataproc.V1.Model.RddDataDistribution.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Dataproc.V1.Model.RddDataDistribution do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
