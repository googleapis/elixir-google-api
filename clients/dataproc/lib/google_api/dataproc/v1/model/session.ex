# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Dataproc.V1.Model.Session do
  @moduledoc """
  A representation of a session.

  ## Attributes

  *   `createTime` (*type:* `DateTime.t`, *default:* `nil`) - Output only. The time when the session was created.
  *   `creator` (*type:* `String.t`, *default:* `nil`) - Output only. The email address of the user who created the session.
  *   `environmentConfig` (*type:* `GoogleApi.Dataproc.V1.Model.EnvironmentConfig.t`, *default:* `nil`) - Optional. Environment configuration for the session execution.
  *   `jupyterSession` (*type:* `GoogleApi.Dataproc.V1.Model.JupyterConfig.t`, *default:* `nil`) - Optional. Jupyter session config.
  *   `labels` (*type:* `map()`, *default:* `nil`) - Optional. The labels to associate with the session. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a session.
  *   `name` (*type:* `String.t`, *default:* `nil`) - Required. The resource name of the session.
  *   `runtimeConfig` (*type:* `GoogleApi.Dataproc.V1.Model.RuntimeConfig.t`, *default:* `nil`) - Optional. Runtime configuration for the session execution.
  *   `runtimeInfo` (*type:* `GoogleApi.Dataproc.V1.Model.RuntimeInfo.t`, *default:* `nil`) - Output only. Runtime information about session execution.
  *   `sessionTemplate` (*type:* `String.t`, *default:* `nil`) - Optional. The session template used by the session.Only resource names, including project ID and location, are valid.Example: * https://www.googleapis.com/compute/v1/projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id] * projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id]The template must be in the same project and Dataproc region as the session.
  *   `sparkConnectSession` (*type:* `GoogleApi.Dataproc.V1.Model.SparkConnectConfig.t`, *default:* `nil`) - Optional. Spark connect session config.
  *   `state` (*type:* `String.t`, *default:* `nil`) - Output only. A state of the session.
  *   `stateHistory` (*type:* `list(GoogleApi.Dataproc.V1.Model.SessionStateHistory.t)`, *default:* `nil`) - Output only. Historical state information for the session.
  *   `stateMessage` (*type:* `String.t`, *default:* `nil`) - Output only. Session state details, such as the failure description if the state is FAILED.
  *   `stateTime` (*type:* `DateTime.t`, *default:* `nil`) - Output only. The time when the session entered the current state.
  *   `user` (*type:* `String.t`, *default:* `nil`) - Optional. The email address of the user who owns the session.
  *   `uuid` (*type:* `String.t`, *default:* `nil`) - Output only. A session UUID (Unique Universal Identifier). The service generates this value when it creates the session.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :createTime => DateTime.t() | nil,
          :creator => String.t() | nil,
          :environmentConfig => GoogleApi.Dataproc.V1.Model.EnvironmentConfig.t() | nil,
          :jupyterSession => GoogleApi.Dataproc.V1.Model.JupyterConfig.t() | nil,
          :labels => map() | nil,
          :name => String.t() | nil,
          :runtimeConfig => GoogleApi.Dataproc.V1.Model.RuntimeConfig.t() | nil,
          :runtimeInfo => GoogleApi.Dataproc.V1.Model.RuntimeInfo.t() | nil,
          :sessionTemplate => String.t() | nil,
          :sparkConnectSession => GoogleApi.Dataproc.V1.Model.SparkConnectConfig.t() | nil,
          :state => String.t() | nil,
          :stateHistory => list(GoogleApi.Dataproc.V1.Model.SessionStateHistory.t()) | nil,
          :stateMessage => String.t() | nil,
          :stateTime => DateTime.t() | nil,
          :user => String.t() | nil,
          :uuid => String.t() | nil
        }

  field(:createTime, as: DateTime)
  field(:creator)
  field(:environmentConfig, as: GoogleApi.Dataproc.V1.Model.EnvironmentConfig)
  field(:jupyterSession, as: GoogleApi.Dataproc.V1.Model.JupyterConfig)
  field(:labels, type: :map)
  field(:name)
  field(:runtimeConfig, as: GoogleApi.Dataproc.V1.Model.RuntimeConfig)
  field(:runtimeInfo, as: GoogleApi.Dataproc.V1.Model.RuntimeInfo)
  field(:sessionTemplate)
  field(:sparkConnectSession, as: GoogleApi.Dataproc.V1.Model.SparkConnectConfig)
  field(:state)
  field(:stateHistory, as: GoogleApi.Dataproc.V1.Model.SessionStateHistory, type: :list)
  field(:stateMessage)
  field(:stateTime, as: DateTime)
  field(:user)
  field(:uuid)
end

defimpl Poison.Decoder, for: GoogleApi.Dataproc.V1.Model.Session do
  def decode(value, options) do
    GoogleApi.Dataproc.V1.Model.Session.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Dataproc.V1.Model.Session do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
