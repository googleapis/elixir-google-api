# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Dataproc.V1.Model.RepairClusterRequest do
  @moduledoc """
  A request to repair a cluster.

  ## Attributes

  *   `cluster` (*type:* `GoogleApi.Dataproc.V1.Model.ClusterToRepair.t`, *default:* `nil`) - Optional. Cluster to be repaired
  *   `clusterUuid` (*type:* `String.t`, *default:* `nil`) - Optional. Specifying the cluster_uuid means the RPC will fail (with error NOT_FOUND) if a cluster with the specified UUID does not exist.
  *   `gracefulDecommissionTimeout` (*type:* `String.t`, *default:* `nil`) - Optional. Timeout for graceful YARN decommissioning. Graceful decommissioning facilitates the removal of cluster nodes without interrupting jobs in progress. The timeout specifies the amount of time to wait for jobs finish before forcefully removing nodes. The default timeout is 0 for forceful decommissioning, and the maximum timeout period is 1 day. (see JSON Mappingâ€”Duration (https://developers.google.com/protocol-buffers/docs/proto3#json)).graceful_decommission_timeout is supported in Dataproc image versions 1.2+.
  *   `nodePools` (*type:* `list(GoogleApi.Dataproc.V1.Model.NodePool.t)`, *default:* `nil`) - Optional. Node pools and corresponding repair action to be taken. All node pools should be unique in this request. i.e. Multiple entries for the same node pool id are not allowed.
  *   `parentOperationId` (*type:* `String.t`, *default:* `nil`) - Optional. operation id of the parent operation sending the repair request
  *   `requestId` (*type:* `String.t`, *default:* `nil`) - Optional. A unique ID used to identify the request. If the server receives two RepairClusterRequests with the same ID, the second request is ignored, and the first google.longrunning.Operation created and stored in the backend is returned.Recommendation: Set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :cluster => GoogleApi.Dataproc.V1.Model.ClusterToRepair.t() | nil,
          :clusterUuid => String.t() | nil,
          :gracefulDecommissionTimeout => String.t() | nil,
          :nodePools => list(GoogleApi.Dataproc.V1.Model.NodePool.t()) | nil,
          :parentOperationId => String.t() | nil,
          :requestId => String.t() | nil
        }

  field(:cluster, as: GoogleApi.Dataproc.V1.Model.ClusterToRepair)
  field(:clusterUuid)
  field(:gracefulDecommissionTimeout)
  field(:nodePools, as: GoogleApi.Dataproc.V1.Model.NodePool, type: :list)
  field(:parentOperationId)
  field(:requestId)
end

defimpl Poison.Decoder, for: GoogleApi.Dataproc.V1.Model.RepairClusterRequest do
  def decode(value, options) do
    GoogleApi.Dataproc.V1.Model.RepairClusterRequest.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Dataproc.V1.Model.RepairClusterRequest do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
