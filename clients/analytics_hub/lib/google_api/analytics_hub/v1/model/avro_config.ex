# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.AnalyticsHub.V1.Model.AvroConfig do
  @moduledoc """
  Configuration for writing message data in Avro format. Message payloads and metadata will be written to files as an Avro binary.

  ## Attributes

  *   `useTopicSchema` (*type:* `boolean()`, *default:* `nil`) - Optional. When true, the output Cloud Storage file will be serialized using the topic schema, if it exists.
  *   `writeMetadata` (*type:* `boolean()`, *default:* `nil`) - Optional. When true, write the subscription name, message_id, publish_time, attributes, and ordering_key as additional fields in the output. The subscription name, message_id, and publish_time fields are put in their own fields while all other message properties other than data (for example, an ordering_key, if present) are added as entries in the attributes map.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :useTopicSchema => boolean() | nil,
          :writeMetadata => boolean() | nil
        }

  field(:useTopicSchema)
  field(:writeMetadata)
end

defimpl Poison.Decoder, for: GoogleApi.AnalyticsHub.V1.Model.AvroConfig do
  def decode(value, options) do
    GoogleApi.AnalyticsHub.V1.Model.AvroConfig.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.AnalyticsHub.V1.Model.AvroConfig do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
