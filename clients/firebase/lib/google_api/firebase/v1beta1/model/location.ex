# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Firebase.V1beta1.Model.Location do
  @moduledoc """
  **DEPRECATED.** _This Location is no longer used to determine Firebase resource locations. Instead, consult product documentation to determine valid locations for each resource used in your Project._ A ["location for default Google Cloud resources"](https://firebase.google.com/docs/projects/locations#default-cloud-location) that can be selected for a FirebaseProject. These are resources associated with Google App Engine.

  ## Attributes

  *   `features` (*type:* `list(String.t)`, *default:* `nil`) - Products and services that are available in the location for default Google Cloud resources.
  *   `locationId` (*type:* `String.t`, *default:* `nil`) - The ID of the Project's location for default Google Cloud resources. It will be one of the available [Google App Engine locations](https://cloud.google.com/about/locations#region).
  *   `type` (*type:* `String.t`, *default:* `nil`) - Indicates whether the location for default Google Cloud resources is a [regional or multi-regional location](https://firebase.google.com/docs/projects/locations#types) for data replication.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :features => list(String.t()) | nil,
          :locationId => String.t() | nil,
          :type => String.t() | nil
        }

  field(:features, type: :list)
  field(:locationId)
  field(:type)
end

defimpl Poison.Decoder, for: GoogleApi.Firebase.V1beta1.Model.Location do
  def decode(value, options) do
    GoogleApi.Firebase.V1beta1.Model.Location.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Firebase.V1beta1.Model.Location do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
