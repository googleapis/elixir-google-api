# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudScheduler.V1.Model.HttpTarget do
  @moduledoc """
  Http target. The job will be pushed to the job handler by means of an HTTP request via an http_method such as HTTP POST, HTTP GET, etc. The job is acknowledged by means of an HTTP response code in the range [200 - 299]. A failure to receive a response constitutes a failed execution. For a redirected request, the response returned by the redirected request is considered.

  ## Attributes

  *   `body` (*type:* `String.t`, *default:* `nil`) - HTTP request body. A request body is allowed only if the HTTP method is POST, PUT, or PATCH. It is an error to set body on a job with an incompatible HttpMethod.
  *   `headers` (*type:* `map()`, *default:* `nil`) - The user can specify HTTP request headers to send with the job's HTTP request. This map contains the header field names and values. Repeated headers are not supported, but a header value can contain commas. These headers represent a subset of the headers that will accompany the job's HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is below: - Host: This will be computed by Cloud Scheduler and derived from uri. * `Content-Length`: This will be computed by Cloud Scheduler. * `User-Agent`: This will be set to `"Google-Cloud-Scheduler"`. * `X-Google-*`: Google internal use only. * `X-AppEngine-*`: Google internal use only. * `X-CloudScheduler`: This header will be set to true. * `X-CloudScheduler-JobName`: This header will contain the job name. * `X-CloudScheduler-ScheduleTime`: For Cloud Scheduler jobs specified in the unix-cron format, this header will contain the job schedule time in RFC3339 UTC "Zulu" format. The total size of headers must be less than 80KB.
  *   `httpMethod` (*type:* `String.t`, *default:* `nil`) - Which HTTP method to use for the request.
  *   `oauthToken` (*type:* `GoogleApi.CloudScheduler.V1.Model.OAuthToken.t`, *default:* `nil`) - If specified, an [OAuth token](https://developers.google.com/identity/protocols/OAuth2) will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
  *   `oidcToken` (*type:* `GoogleApi.CloudScheduler.V1.Model.OidcToken.t`, *default:* `nil`) - If specified, an [OIDC](https://developers.google.com/identity/protocols/OpenIDConnect) token will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
  *   `uri` (*type:* `String.t`, *default:* `nil`) - Required. The full URI path that the request will be sent to. This string must begin with either "http://" or "https://". Some examples of valid values for uri are: `http://acme.com` and `https://acme.com/sales:8080`. Cloud Scheduler will encode some characters for safety and compatibility. The maximum allowed URL length is 2083 characters after encoding.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :body => String.t() | nil,
          :headers => map() | nil,
          :httpMethod => String.t() | nil,
          :oauthToken => GoogleApi.CloudScheduler.V1.Model.OAuthToken.t() | nil,
          :oidcToken => GoogleApi.CloudScheduler.V1.Model.OidcToken.t() | nil,
          :uri => String.t() | nil
        }

  field(:body)
  field(:headers, type: :map)
  field(:httpMethod)
  field(:oauthToken, as: GoogleApi.CloudScheduler.V1.Model.OAuthToken)
  field(:oidcToken, as: GoogleApi.CloudScheduler.V1.Model.OidcToken)
  field(:uri)
end

defimpl Poison.Decoder, for: GoogleApi.CloudScheduler.V1.Model.HttpTarget do
  def decode(value, options) do
    GoogleApi.CloudScheduler.V1.Model.HttpTarget.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudScheduler.V1.Model.HttpTarget do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
