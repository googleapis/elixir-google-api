# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Compute.V1.Model.FirewallPolicyRuleMatcher do
  @moduledoc """
  Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified.

  ## Attributes

  *   `destIpRanges` (*type:* `list(String.t)`, *default:* `nil`) - CIDR IP address range. Maximum number of destination CIDR IP ranges allowed is 5000.
  *   `layer4Configs` (*type:* `list(GoogleApi.Compute.V1.Model.FirewallPolicyRuleMatcherLayer4Config.t)`, *default:* `nil`) - Pairs of IP protocols and ports that the rule should match.
  *   `srcIpRanges` (*type:* `list(String.t)`, *default:* `nil`) - CIDR IP address range. Maximum number of source CIDR IP ranges allowed is 5000.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :destIpRanges => list(String.t()) | nil,
          :layer4Configs =>
            list(GoogleApi.Compute.V1.Model.FirewallPolicyRuleMatcherLayer4Config.t()) | nil,
          :srcIpRanges => list(String.t()) | nil
        }

  field(:destIpRanges, type: :list)

  field(:layer4Configs,
    as: GoogleApi.Compute.V1.Model.FirewallPolicyRuleMatcherLayer4Config,
    type: :list
  )

  field(:srcIpRanges, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.Compute.V1.Model.FirewallPolicyRuleMatcher do
  def decode(value, options) do
    GoogleApi.Compute.V1.Model.FirewallPolicyRuleMatcher.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Compute.V1.Model.FirewallPolicyRuleMatcher do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
