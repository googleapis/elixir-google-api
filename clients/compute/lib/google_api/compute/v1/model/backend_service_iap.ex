# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Compute.V1.Model.BackendServiceIAP do
  @moduledoc """
  Identity-Aware Proxy

  ## Attributes

  *   `enabled` (*type:* `boolean()`, *default:* `nil`) - Whether the serving infrastructure will authenticate and authorize all incoming requests. If true, the oauth2ClientId and oauth2ClientSecret fields must be non-empty.
  *   `oauth2ClientId` (*type:* `String.t`, *default:* `nil`) - OAuth2 client ID to use for the authentication flow.
  *   `oauth2ClientSecret` (*type:* `String.t`, *default:* `nil`) - OAuth2 client secret to use for the authentication flow. For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2ClientSecretSha256 field. @InputOnly
  *   `oauth2ClientSecretSha256` (*type:* `String.t`, *default:* `nil`) - [Output Only] SHA256 hash value for the field oauth2_client_secret above.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :enabled => boolean() | nil,
          :oauth2ClientId => String.t() | nil,
          :oauth2ClientSecret => String.t() | nil,
          :oauth2ClientSecretSha256 => String.t() | nil
        }

  field(:enabled)
  field(:oauth2ClientId)
  field(:oauth2ClientSecret)
  field(:oauth2ClientSecretSha256)
end

defimpl Poison.Decoder, for: GoogleApi.Compute.V1.Model.BackendServiceIAP do
  def decode(value, options) do
    GoogleApi.Compute.V1.Model.BackendServiceIAP.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Compute.V1.Model.BackendServiceIAP do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
