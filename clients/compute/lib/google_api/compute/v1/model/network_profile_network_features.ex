# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Compute.V1.Model.NetworkProfileNetworkFeatures do
  @moduledoc """


  ## Attributes

  *   `addressPurposes` (*type:* `list(String.t)`, *default:* `nil`) - Specifies what address purposes are supported. If empty, all address purposes are supported.
  *   `allowAliasIpRanges` (*type:* `String.t`, *default:* `nil`) - Specifies whether alias IP ranges (and secondary address ranges) are allowed.
  *   `allowAutoModeSubnet` (*type:* `String.t`, *default:* `nil`) - Specifies whether auto mode subnet creation is allowed.
  *   `allowClassDFirewalls` (*type:* `String.t`, *default:* `nil`) - Specifies whether firewalls for Class D address ranges are supported.
  *   `allowCloudNat` (*type:* `String.t`, *default:* `nil`) - Specifies whether cloud NAT creation is allowed.
  *   `allowCloudRouter` (*type:* `String.t`, *default:* `nil`) - Specifies whether cloud router creation is allowed.
  *   `allowExternalIpAccess` (*type:* `String.t`, *default:* `nil`) - Specifies whether VMs are allowed to have external IP access on network interfaces connected to this VPC.
  *   `allowInterconnect` (*type:* `String.t`, *default:* `nil`) - Specifies whether Cloud Interconnect creation is allowed.
  *   `allowLoadBalancing` (*type:* `String.t`, *default:* `nil`) - Specifies whether cloud load balancing is allowed.
  *   `allowMultiNicInSameNetwork` (*type:* `String.t`, *default:* `nil`) - Specifies whether multi-nic in the same network is allowed.
  *   `allowPacketMirroring` (*type:* `String.t`, *default:* `nil`) - Specifies whether Packet Mirroring 1.0 is supported.
  *   `allowPrivateGoogleAccess` (*type:* `String.t`, *default:* `nil`) - Specifies whether private Google access is allowed.
  *   `allowPsc` (*type:* `String.t`, *default:* `nil`) - Specifies whether PSC creation is allowed.
  *   `allowSameNetworkUnicast` (*type:* `String.t`, *default:* `nil`) - Specifies whether unicast within the same network is allowed.
  *   `allowStaticRoutes` (*type:* `String.t`, *default:* `nil`) - Specifies whether static route creation is allowed.
  *   `allowSubInterfaces` (*type:* `String.t`, *default:* `nil`) - Specifies whether sub interfaces are allowed.
  *   `allowVpcPeering` (*type:* `String.t`, *default:* `nil`) - Specifies whether VPC peering is allowed.
  *   `allowVpn` (*type:* `String.t`, *default:* `nil`) - Specifies whether VPN creation is allowed.
  *   `interfaceTypes` (*type:* `list(String.t)`, *default:* `nil`) - If set, limits the interface types that the network supports. If empty, all interface types are supported.
  *   `subnetPurposes` (*type:* `list(String.t)`, *default:* `nil`) - Specifies which subnetwork purposes are supported.
  *   `subnetStackTypes` (*type:* `list(String.t)`, *default:* `nil`) - Specifies which subnetwork stack types are supported.
  *   `unicast` (*type:* `String.t`, *default:* `nil`) - Specifies which type of unicast is supported.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :addressPurposes => list(String.t()) | nil,
          :allowAliasIpRanges => String.t() | nil,
          :allowAutoModeSubnet => String.t() | nil,
          :allowClassDFirewalls => String.t() | nil,
          :allowCloudNat => String.t() | nil,
          :allowCloudRouter => String.t() | nil,
          :allowExternalIpAccess => String.t() | nil,
          :allowInterconnect => String.t() | nil,
          :allowLoadBalancing => String.t() | nil,
          :allowMultiNicInSameNetwork => String.t() | nil,
          :allowPacketMirroring => String.t() | nil,
          :allowPrivateGoogleAccess => String.t() | nil,
          :allowPsc => String.t() | nil,
          :allowSameNetworkUnicast => String.t() | nil,
          :allowStaticRoutes => String.t() | nil,
          :allowSubInterfaces => String.t() | nil,
          :allowVpcPeering => String.t() | nil,
          :allowVpn => String.t() | nil,
          :interfaceTypes => list(String.t()) | nil,
          :subnetPurposes => list(String.t()) | nil,
          :subnetStackTypes => list(String.t()) | nil,
          :unicast => String.t() | nil
        }

  field(:addressPurposes, type: :list)
  field(:allowAliasIpRanges)
  field(:allowAutoModeSubnet)
  field(:allowClassDFirewalls)
  field(:allowCloudNat)
  field(:allowCloudRouter)
  field(:allowExternalIpAccess)
  field(:allowInterconnect)
  field(:allowLoadBalancing)
  field(:allowMultiNicInSameNetwork)
  field(:allowPacketMirroring)
  field(:allowPrivateGoogleAccess)
  field(:allowPsc)
  field(:allowSameNetworkUnicast)
  field(:allowStaticRoutes)
  field(:allowSubInterfaces)
  field(:allowVpcPeering)
  field(:allowVpn)
  field(:interfaceTypes, type: :list)
  field(:subnetPurposes, type: :list)
  field(:subnetStackTypes, type: :list)
  field(:unicast)
end

defimpl Poison.Decoder, for: GoogleApi.Compute.V1.Model.NetworkProfileNetworkFeatures do
  def decode(value, options) do
    GoogleApi.Compute.V1.Model.NetworkProfileNetworkFeatures.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Compute.V1.Model.NetworkProfileNetworkFeatures do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
