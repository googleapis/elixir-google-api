# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Compute.V1.Model.RouterNatRule do
  @moduledoc """


  ## Attributes

  *   `action` (*type:* `GoogleApi.Compute.V1.Model.RouterNatRuleAction.t`, *default:* `nil`) - The action to be enforced for traffic that matches this rule.
  *   `description` (*type:* `String.t`, *default:* `nil`) - An optional description of this rule.
  *   `match` (*type:* `String.t`, *default:* `nil`) - CEL expression that specifies the match condition that egress traffic from a VM is evaluated against. If it evaluates to true, the corresponding `action` is enforced. The following examples are valid match expressions for public NAT: "inIpRange(destination.ip, '1.1.0.0/16') || inIpRange(destination.ip, '2.2.0.0/16')" "destination.ip == '1.1.0.1' || destination.ip == '8.8.8.8'" The following example is a valid match expression for private NAT: "nexthop.hub == '/projects/my-project/global/hub/hub-1'"
  *   `ruleNumber` (*type:* `integer()`, *default:* `nil`) - An integer uniquely identifying a rule in the list. The rule number must be a positive value between 0 and 65000, and must be unique among rules within a NAT.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :action => GoogleApi.Compute.V1.Model.RouterNatRuleAction.t() | nil,
          :description => String.t() | nil,
          :match => String.t() | nil,
          :ruleNumber => integer() | nil
        }

  field(:action, as: GoogleApi.Compute.V1.Model.RouterNatRuleAction)
  field(:description)
  field(:match)
  field(:ruleNumber)
end

defimpl Poison.Decoder, for: GoogleApi.Compute.V1.Model.RouterNatRule do
  def decode(value, options) do
    GoogleApi.Compute.V1.Model.RouterNatRule.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Compute.V1.Model.RouterNatRule do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
