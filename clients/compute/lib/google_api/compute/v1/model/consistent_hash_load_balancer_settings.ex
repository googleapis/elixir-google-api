# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Compute.V1.Model.ConsistentHashLoadBalancerSettings do
  @moduledoc """
  This message defines settings for a consistent hash style load balancer.

  ## Attributes

  *   `httpCookie` (*type:* `GoogleApi.Compute.V1.Model.ConsistentHashLoadBalancerSettingsHttpCookie.t`, *default:* `nil`) - Hash is based on HTTP Cookie. This field describes a HTTP cookie that will be used as the hash key for the consistent hash load balancer. If the cookie is not present, it will be generated. This field is applicable if the sessionAffinity is set to HTTP_COOKIE. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
  *   `httpHeaderName` (*type:* `String.t`, *default:* `nil`) - The hash based on the value of the specified header field. This field is applicable if the sessionAffinity is set to HEADER_FIELD.
  *   `minimumRingSize` (*type:* `String.t`, *default:* `nil`) - The minimum number of virtual nodes to use for the hash ring. Defaults to 1024. Larger ring sizes result in more granular load distributions. If the number of hosts in the load balancing pool is larger than the ring size, each host will be assigned a single virtual node.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :httpCookie =>
            GoogleApi.Compute.V1.Model.ConsistentHashLoadBalancerSettingsHttpCookie.t() | nil,
          :httpHeaderName => String.t() | nil,
          :minimumRingSize => String.t() | nil
        }

  field(:httpCookie, as: GoogleApi.Compute.V1.Model.ConsistentHashLoadBalancerSettingsHttpCookie)
  field(:httpHeaderName)
  field(:minimumRingSize)
end

defimpl Poison.Decoder, for: GoogleApi.Compute.V1.Model.ConsistentHashLoadBalancerSettings do
  def decode(value, options) do
    GoogleApi.Compute.V1.Model.ConsistentHashLoadBalancerSettings.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Compute.V1.Model.ConsistentHashLoadBalancerSettings do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
