# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Compute.V1.Model.HttpQueryParameterMatch do
  @moduledoc """
  HttpRouteRuleMatch criteria for a request's query parameter.

  ## Attributes

  *   `exactMatch` (*type:* `String.t`, *default:* `nil`) - The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch. Only one of presentMatch, exactMatch or regexMatch must be set.
  *   `name` (*type:* `String.t`, *default:* `nil`) - The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
  *   `presentMatch` (*type:* `boolean()`, *default:* `nil`) - Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not. Only one of presentMatch, exactMatch or regexMatch must be set.
  *   `regexMatch` (*type:* `String.t`, *default:* `nil`) - The queryParameterMatch matches if the value of the parameter matches the regular expression specified by regexMatch. For the regular expression grammar, please see github.com/google/re2/wiki/Syntax Only one of presentMatch, exactMatch or regexMatch must be set. Note that regexMatch only applies when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :exactMatch => String.t() | nil,
          :name => String.t() | nil,
          :presentMatch => boolean() | nil,
          :regexMatch => String.t() | nil
        }

  field(:exactMatch)
  field(:name)
  field(:presentMatch)
  field(:regexMatch)
end

defimpl Poison.Decoder, for: GoogleApi.Compute.V1.Model.HttpQueryParameterMatch do
  def decode(value, options) do
    GoogleApi.Compute.V1.Model.HttpQueryParameterMatch.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Compute.V1.Model.HttpQueryParameterMatch do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
