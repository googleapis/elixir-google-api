# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Compute.V1.Model.RoutePolicyPolicyTerm do
  @moduledoc """


  ## Attributes

  *   `actions` (*type:* `list(GoogleApi.Compute.V1.Model.Expr.t)`, *default:* `nil`) - CEL expressions to evaluate to modify a route when this term matches.
  *   `match` (*type:* `GoogleApi.Compute.V1.Model.Expr.t`, *default:* `nil`) - CEL expression evaluated against a route to determine if this term applies. When not set, the term applies to all routes.
  *   `priority` (*type:* `integer()`, *default:* `nil`) - The evaluation priority for this term, which must be between 0 (inclusive) and 2^31 (exclusive), and unique within the list.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :actions => list(GoogleApi.Compute.V1.Model.Expr.t()) | nil,
          :match => GoogleApi.Compute.V1.Model.Expr.t() | nil,
          :priority => integer() | nil
        }

  field(:actions, as: GoogleApi.Compute.V1.Model.Expr, type: :list)
  field(:match, as: GoogleApi.Compute.V1.Model.Expr)
  field(:priority)
end

defimpl Poison.Decoder, for: GoogleApi.Compute.V1.Model.RoutePolicyPolicyTerm do
  def decode(value, options) do
    GoogleApi.Compute.V1.Model.RoutePolicyPolicyTerm.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Compute.V1.Model.RoutePolicyPolicyTerm do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
