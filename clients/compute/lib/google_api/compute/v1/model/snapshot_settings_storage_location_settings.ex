# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Compute.V1.Model.SnapshotSettingsStorageLocationSettings do
  @moduledoc """


  ## Attributes

  *   `locations` (*type:* `%{optional(String.t) => GoogleApi.Compute.V1.Model.SnapshotSettingsStorageLocationSettingsStorageLocationPreference.t}`, *default:* `nil`) - When the policy is SPECIFIC_LOCATIONS, snapshots will be stored in the locations listed in this field. Keys are Cloud Storage bucket locations. Only one location can be specified.
  *   `policy` (*type:* `String.t`, *default:* `nil`) - The chosen location policy.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :locations =>
            %{
              optional(String.t()) =>
                GoogleApi.Compute.V1.Model.SnapshotSettingsStorageLocationSettingsStorageLocationPreference.t()
            }
            | nil,
          :policy => String.t() | nil
        }

  field(:locations,
    as:
      GoogleApi.Compute.V1.Model.SnapshotSettingsStorageLocationSettingsStorageLocationPreference,
    type: :map
  )

  field(:policy)
end

defimpl Poison.Decoder, for: GoogleApi.Compute.V1.Model.SnapshotSettingsStorageLocationSettings do
  def decode(value, options) do
    GoogleApi.Compute.V1.Model.SnapshotSettingsStorageLocationSettings.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Compute.V1.Model.SnapshotSettingsStorageLocationSettings do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
