# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Compute.V1.Model.InterconnectLocation do
  @moduledoc """
  Represents an Interconnect Attachment (VLAN) Location resource. You can use this resource to find location details about an Interconnect attachment (VLAN). For more information about interconnect attachments, read Creating VLAN Attachments.

  ## Attributes

  *   `address` (*type:* `String.t`, *default:* `nil`) - [Output Only] The postal address of the Point of Presence, each line in the address is separated by a newline character.
  *   `availabilityZone` (*type:* `String.t`, *default:* `nil`) - [Output Only] Availability zone for this InterconnectLocation. Within a metropolitan area (metro), maintenance will not be simultaneously scheduled in more than one availability zone. Example: "zone1" or "zone2".
  *   `availableFeatures` (*type:* `list(String.t)`, *default:* `nil`) - [Output only] List of features available at this InterconnectLocation, which can take one of the following values: - IF_MACSEC 
  *   `availableLinkTypes` (*type:* `list(String.t)`, *default:* `nil`) - [Output only] List of link types available at this InterconnectLocation, which can take one of the following values: - LINK_TYPE_ETHERNET_10G_LR - LINK_TYPE_ETHERNET_100G_LR 
  *   `city` (*type:* `String.t`, *default:* `nil`) - [Output Only] Metropolitan area designator that indicates which city an interconnect is located. For example: "Chicago, IL", "Amsterdam, Netherlands".
  *   `continent` (*type:* `String.t`, *default:* `nil`) - [Output Only] Continent for this location, which can take one of the following values: - AFRICA - ASIA_PAC - EUROPE - NORTH_AMERICA - SOUTH_AMERICA 
  *   `creationTimestamp` (*type:* `String.t`, *default:* `nil`) - [Output Only] Creation timestamp in RFC3339 text format.
  *   `description` (*type:* `String.t`, *default:* `nil`) - [Output Only] An optional description of the resource.
  *   `facilityProvider` (*type:* `String.t`, *default:* `nil`) - [Output Only] The name of the provider for this facility (e.g., EQUINIX).
  *   `facilityProviderFacilityId` (*type:* `String.t`, *default:* `nil`) - [Output Only] A provider-assigned Identifier for this facility (e.g., Ashburn-DC1).
  *   `id` (*type:* `String.t`, *default:* `nil`) - [Output Only] The unique identifier for the resource. This identifier is defined by the server.
  *   `kind` (*type:* `String.t`, *default:* `compute#interconnectLocation`) - [Output Only] Type of the resource. Always compute#interconnectLocation for interconnect locations.
  *   `name` (*type:* `String.t`, *default:* `nil`) - [Output Only] Name of the resource.
  *   `peeringdbFacilityId` (*type:* `String.t`, *default:* `nil`) - [Output Only] The peeringdb identifier for this facility (corresponding with a netfac type in peeringdb).
  *   `regionInfos` (*type:* `list(GoogleApi.Compute.V1.Model.InterconnectLocationRegionInfo.t)`, *default:* `nil`) - [Output Only] A list of InterconnectLocation.RegionInfo objects, that describe parameters pertaining to the relation between this InterconnectLocation and various Google Cloud regions.
  *   `selfLink` (*type:* `String.t`, *default:* `nil`) - [Output Only] Server-defined URL for the resource.
  *   `status` (*type:* `String.t`, *default:* `nil`) - [Output Only] The status of this InterconnectLocation, which can take one of the following values: - CLOSED: The InterconnectLocation is closed and is unavailable for provisioning new Interconnects. - AVAILABLE: The InterconnectLocation is available for provisioning new Interconnects. 
  *   `supportsPzs` (*type:* `boolean()`, *default:* `nil`) - [Output Only] Reserved for future use.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :address => String.t() | nil,
          :availabilityZone => String.t() | nil,
          :availableFeatures => list(String.t()) | nil,
          :availableLinkTypes => list(String.t()) | nil,
          :city => String.t() | nil,
          :continent => String.t() | nil,
          :creationTimestamp => String.t() | nil,
          :description => String.t() | nil,
          :facilityProvider => String.t() | nil,
          :facilityProviderFacilityId => String.t() | nil,
          :id => String.t() | nil,
          :kind => String.t() | nil,
          :name => String.t() | nil,
          :peeringdbFacilityId => String.t() | nil,
          :regionInfos =>
            list(GoogleApi.Compute.V1.Model.InterconnectLocationRegionInfo.t()) | nil,
          :selfLink => String.t() | nil,
          :status => String.t() | nil,
          :supportsPzs => boolean() | nil
        }

  field(:address)
  field(:availabilityZone)
  field(:availableFeatures, type: :list)
  field(:availableLinkTypes, type: :list)
  field(:city)
  field(:continent)
  field(:creationTimestamp)
  field(:description)
  field(:facilityProvider)
  field(:facilityProviderFacilityId)
  field(:id)
  field(:kind)
  field(:name)
  field(:peeringdbFacilityId)
  field(:regionInfos, as: GoogleApi.Compute.V1.Model.InterconnectLocationRegionInfo, type: :list)
  field(:selfLink)
  field(:status)
  field(:supportsPzs)
end

defimpl Poison.Decoder, for: GoogleApi.Compute.V1.Model.InterconnectLocation do
  def decode(value, options) do
    GoogleApi.Compute.V1.Model.InterconnectLocation.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Compute.V1.Model.InterconnectLocation do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
