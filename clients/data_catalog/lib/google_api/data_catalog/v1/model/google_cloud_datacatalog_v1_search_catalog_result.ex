# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.DataCatalog.V1.Model.GoogleCloudDatacatalogV1SearchCatalogResult do
  @moduledoc """
  Result in the response to a search request. Each result captures details of one entry that matches the search.

  ## Attributes

  *   `description` (*type:* `String.t`, *default:* `nil`) - Entry description that can consist of several sentences or paragraphs that describe entry contents.
  *   `displayName` (*type:* `String.t`, *default:* `nil`) - The display name of the result.
  *   `fullyQualifiedName` (*type:* `String.t`, *default:* `nil`) - Fully qualified name (FQN) of the resource. FQNs take two forms: * For non-regionalized resources: `{SYSTEM}:{PROJECT}.{PATH_TO_RESOURCE_SEPARATED_WITH_DOTS}` * For regionalized resources: `{SYSTEM}:{PROJECT}.{LOCATION_ID}.{PATH_TO_RESOURCE_SEPARATED_WITH_DOTS}` Example for a DPMS table: `dataproc_metastore:PROJECT_ID.LOCATION_ID.INSTANCE_ID.DATABASE_ID.TABLE_ID`
  *   `integratedSystem` (*type:* `String.t`, *default:* `nil`) - Output only. The source system that Data Catalog automatically integrates with, such as BigQuery, Cloud Pub/Sub, or Dataproc Metastore.
  *   `linkedResource` (*type:* `String.t`, *default:* `nil`) - The full name of the Google Cloud resource the entry belongs to. For more information, see [Full Resource Name] (/apis/design/resource_names#full_resource_name). Example: `//bigquery.googleapis.com/projects/PROJECT_ID/datasets/DATASET_ID/tables/TABLE_ID`
  *   `modifyTime` (*type:* `DateTime.t`, *default:* `nil`) - The last modification timestamp of the entry in the source system.
  *   `relativeResourceName` (*type:* `String.t`, *default:* `nil`) - The relative name of the resource in URL format. Examples: * `projects/{PROJECT_ID}/locations/{LOCATION_ID}/entryGroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}` * `projects/{PROJECT_ID}/tagTemplates/{TAG_TEMPLATE_ID}`
  *   `searchResultSubtype` (*type:* `String.t`, *default:* `nil`) - Sub-type of the search result. A dot-delimited full type of the resource. The same type you specify in the `type` search predicate. Examples: `entry.table`, `entry.dataStream`, `tagTemplate`.
  *   `searchResultType` (*type:* `String.t`, *default:* `nil`) - Type of the search result. You can use this field to determine which get method to call to fetch the full resource.
  *   `userSpecifiedSystem` (*type:* `String.t`, *default:* `nil`) - Custom source system that you can manually integrate Data Catalog with.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :description => String.t() | nil,
          :displayName => String.t() | nil,
          :fullyQualifiedName => String.t() | nil,
          :integratedSystem => String.t() | nil,
          :linkedResource => String.t() | nil,
          :modifyTime => DateTime.t() | nil,
          :relativeResourceName => String.t() | nil,
          :searchResultSubtype => String.t() | nil,
          :searchResultType => String.t() | nil,
          :userSpecifiedSystem => String.t() | nil
        }

  field(:description)
  field(:displayName)
  field(:fullyQualifiedName)
  field(:integratedSystem)
  field(:linkedResource)
  field(:modifyTime, as: DateTime)
  field(:relativeResourceName)
  field(:searchResultSubtype)
  field(:searchResultType)
  field(:userSpecifiedSystem)
end

defimpl Poison.Decoder,
  for: GoogleApi.DataCatalog.V1.Model.GoogleCloudDatacatalogV1SearchCatalogResult do
  def decode(value, options) do
    GoogleApi.DataCatalog.V1.Model.GoogleCloudDatacatalogV1SearchCatalogResult.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.DataCatalog.V1.Model.GoogleCloudDatacatalogV1SearchCatalogResult do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
