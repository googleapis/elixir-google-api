# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CivicInfo.V2.Model.CivicinfoApiprotosV2RepresentativeInfoResponse do
  @moduledoc """
  The result of a representative info lookup query.

  ## Attributes

  *   `divisions` (*type:* `%{optional(String.t) => GoogleApi.CivicInfo.V2.Model.CivicinfoSchemaV2GeographicDivision.t}`, *default:* `nil`) - A map of political geographic divisions that contain the requested address, keyed by the unique Open Civic Data identifier for this division.
  *   `kind` (*type:* `String.t`, *default:* `civicinfo#representativeInfoResponse`) - Identifies what kind of resource this is. Value: the fixed string "civicinfo#representativeInfoResponse".
  *   `normalizedInput` (*type:* `GoogleApi.CivicInfo.V2.Model.CivicinfoSchemaV2SimpleAddressType.t`, *default:* `nil`) - The normalized version of the requested address
  *   `offices` (*type:* `list(GoogleApi.CivicInfo.V2.Model.CivicinfoSchemaV2Office.t)`, *default:* `nil`) - Elected offices referenced by the divisions listed above. Will only be present if includeOffices was true in the request.
  *   `officials` (*type:* `list(GoogleApi.CivicInfo.V2.Model.CivicinfoSchemaV2Official.t)`, *default:* `nil`) - Officials holding the offices listed above. Will only be present if includeOffices was true in the request.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :divisions =>
            %{
              optional(String.t()) =>
                GoogleApi.CivicInfo.V2.Model.CivicinfoSchemaV2GeographicDivision.t()
            }
            | nil,
          :kind => String.t() | nil,
          :normalizedInput =>
            GoogleApi.CivicInfo.V2.Model.CivicinfoSchemaV2SimpleAddressType.t() | nil,
          :offices => list(GoogleApi.CivicInfo.V2.Model.CivicinfoSchemaV2Office.t()) | nil,
          :officials => list(GoogleApi.CivicInfo.V2.Model.CivicinfoSchemaV2Official.t()) | nil
        }

  field(:divisions,
    as: GoogleApi.CivicInfo.V2.Model.CivicinfoSchemaV2GeographicDivision,
    type: :map
  )

  field(:kind)
  field(:normalizedInput, as: GoogleApi.CivicInfo.V2.Model.CivicinfoSchemaV2SimpleAddressType)
  field(:offices, as: GoogleApi.CivicInfo.V2.Model.CivicinfoSchemaV2Office, type: :list)
  field(:officials, as: GoogleApi.CivicInfo.V2.Model.CivicinfoSchemaV2Official, type: :list)
end

defimpl Poison.Decoder,
  for: GoogleApi.CivicInfo.V2.Model.CivicinfoApiprotosV2RepresentativeInfoResponse do
  def decode(value, options) do
    GoogleApi.CivicInfo.V2.Model.CivicinfoApiprotosV2RepresentativeInfoResponse.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.CivicInfo.V2.Model.CivicinfoApiprotosV2RepresentativeInfoResponse do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
