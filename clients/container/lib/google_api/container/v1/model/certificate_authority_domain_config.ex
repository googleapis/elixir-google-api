# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Container.V1.Model.CertificateAuthorityDomainConfig do
  @moduledoc """
  CertificateAuthorityDomainConfig configures one or more fully qualified domain names (FQDN) to a specific certificate.

  ## Attributes

  *   `fqdns` (*type:* `list(String.t)`, *default:* `nil`) - List of fully qualified domain names (FQDN). Specifying port is supported. Wilcards are NOT supported. Examples: - my.customdomain.com - 10.0.1.2:5000
  *   `gcpSecretManagerCertificateConfig` (*type:* `GoogleApi.Container.V1.Model.GCPSecretManagerCertificateConfig.t`, *default:* `nil`) - Google Secret Manager (GCP) certificate configuration.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :fqdns => list(String.t()) | nil,
          :gcpSecretManagerCertificateConfig =>
            GoogleApi.Container.V1.Model.GCPSecretManagerCertificateConfig.t() | nil
        }

  field(:fqdns, type: :list)

  field(:gcpSecretManagerCertificateConfig,
    as: GoogleApi.Container.V1.Model.GCPSecretManagerCertificateConfig
  )
end

defimpl Poison.Decoder, for: GoogleApi.Container.V1.Model.CertificateAuthorityDomainConfig do
  def decode(value, options) do
    GoogleApi.Container.V1.Model.CertificateAuthorityDomainConfig.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Container.V1.Model.CertificateAuthorityDomainConfig do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
