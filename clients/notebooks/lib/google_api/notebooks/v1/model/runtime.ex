# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Notebooks.V1.Model.Runtime do
  @moduledoc """
  The definition of a Runtime for a managed notebook instance.

  ## Attributes

  *   `accessConfig` (*type:* `GoogleApi.Notebooks.V1.Model.RuntimeAccessConfig.t`, *default:* `nil`) - The config settings for accessing runtime.
  *   `createTime` (*type:* `DateTime.t`, *default:* `nil`) - Output only. Runtime creation time.
  *   `healthState` (*type:* `String.t`, *default:* `nil`) - Output only. Runtime health_state.
  *   `metrics` (*type:* `GoogleApi.Notebooks.V1.Model.RuntimeMetrics.t`, *default:* `nil`) - Output only. Contains Runtime daemon metrics such as Service status and JupyterLab stats.
  *   `name` (*type:* `String.t`, *default:* `nil`) - Output only. The resource name of the runtime. Format: `projects/{project}/locations/{location}/runtimes/{runtimeId}`
  *   `softwareConfig` (*type:* `GoogleApi.Notebooks.V1.Model.RuntimeSoftwareConfig.t`, *default:* `nil`) - The config settings for software inside the runtime.
  *   `state` (*type:* `String.t`, *default:* `nil`) - Output only. Runtime state.
  *   `updateTime` (*type:* `DateTime.t`, *default:* `nil`) - Output only. Runtime update time.
  *   `virtualMachine` (*type:* `GoogleApi.Notebooks.V1.Model.VirtualMachine.t`, *default:* `nil`) - Use a Compute Engine VM image to start the managed notebook instance.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :accessConfig => GoogleApi.Notebooks.V1.Model.RuntimeAccessConfig.t() | nil,
          :createTime => DateTime.t() | nil,
          :healthState => String.t() | nil,
          :metrics => GoogleApi.Notebooks.V1.Model.RuntimeMetrics.t() | nil,
          :name => String.t() | nil,
          :softwareConfig => GoogleApi.Notebooks.V1.Model.RuntimeSoftwareConfig.t() | nil,
          :state => String.t() | nil,
          :updateTime => DateTime.t() | nil,
          :virtualMachine => GoogleApi.Notebooks.V1.Model.VirtualMachine.t() | nil
        }

  field(:accessConfig, as: GoogleApi.Notebooks.V1.Model.RuntimeAccessConfig)
  field(:createTime, as: DateTime)
  field(:healthState)
  field(:metrics, as: GoogleApi.Notebooks.V1.Model.RuntimeMetrics)
  field(:name)
  field(:softwareConfig, as: GoogleApi.Notebooks.V1.Model.RuntimeSoftwareConfig)
  field(:state)
  field(:updateTime, as: DateTime)
  field(:virtualMachine, as: GoogleApi.Notebooks.V1.Model.VirtualMachine)
end

defimpl Poison.Decoder, for: GoogleApi.Notebooks.V1.Model.Runtime do
  def decode(value, options) do
    GoogleApi.Notebooks.V1.Model.Runtime.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Notebooks.V1.Model.Runtime do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
