# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Domains.V1alpha2.Model.RenewDomainRequest do
  @moduledoc """
  Request for the `RenewDomain` method.

  ## Attributes

  *   `validateOnly` (*type:* `boolean()`, *default:* `nil`) - Optional. When true, only validation is performed, without actually renewing the domain. For more information, see [Request validation](https://cloud.google.com/apis/design/design_patterns#request_validation)
  *   `yearlyPrice` (*type:* `GoogleApi.Domains.V1alpha2.Model.Money.t`, *default:* `nil`) - Required. Acknowledgement of the price to renew the domain for one year. To get the price, see [Cloud Domains pricing](https://cloud.google.com/domains/pricing). If not provided, the expected price is returned in the error message.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :validateOnly => boolean() | nil,
          :yearlyPrice => GoogleApi.Domains.V1alpha2.Model.Money.t() | nil
        }

  field(:validateOnly)
  field(:yearlyPrice, as: GoogleApi.Domains.V1alpha2.Model.Money)
end

defimpl Poison.Decoder, for: GoogleApi.Domains.V1alpha2.Model.RenewDomainRequest do
  def decode(value, options) do
    GoogleApi.Domains.V1alpha2.Model.RenewDomainRequest.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Domains.V1alpha2.Model.RenewDomainRequest do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
