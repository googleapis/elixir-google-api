# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.BigQuery.V2.Model.Argument do
  @moduledoc """
  Input/output argument of a function or a stored procedure.

  ## Attributes

  *   `argumentKind` (*type:* `String.t`, *default:* `nil`) - Optional. Defaults to FIXED_TYPE.
  *   `dataType` (*type:* `GoogleApi.BigQuery.V2.Model.StandardSqlDataType.t`, *default:* `nil`) - Set if argument_kind == FIXED_TYPE.
  *   `isAggregate` (*type:* `boolean()`, *default:* `nil`) - Optional. Whether the argument is an aggregate function parameter. Must be Unset for routine types other than AGGREGATE_FUNCTION. For AGGREGATE_FUNCTION, if set to false, it is equivalent to adding "NOT AGGREGATE" clause in DDL; Otherwise, it is equivalent to omitting "NOT AGGREGATE" clause in DDL.
  *   `mode` (*type:* `String.t`, *default:* `nil`) - Optional. Specifies whether the argument is input or output. Can be set for procedures only.
  *   `name` (*type:* `String.t`, *default:* `nil`) - Optional. The name of this argument. Can be absent for function return argument.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :argumentKind => String.t() | nil,
          :dataType => GoogleApi.BigQuery.V2.Model.StandardSqlDataType.t() | nil,
          :isAggregate => boolean() | nil,
          :mode => String.t() | nil,
          :name => String.t() | nil
        }

  field(:argumentKind)
  field(:dataType, as: GoogleApi.BigQuery.V2.Model.StandardSqlDataType)
  field(:isAggregate)
  field(:mode)
  field(:name)
end

defimpl Poison.Decoder, for: GoogleApi.BigQuery.V2.Model.Argument do
  def decode(value, options) do
    GoogleApi.BigQuery.V2.Model.Argument.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.BigQuery.V2.Model.Argument do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
