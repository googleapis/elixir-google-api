# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Datastore.V1.Model.PropertyTransform do
  @moduledoc """
  A transformation of an entity property.

  ## Attributes

  *   `appendMissingElements` (*type:* `GoogleApi.Datastore.V1.Model.ArrayValue.t`, *default:* `nil`) - Appends the given elements in order if they are not already present in the current property value. If the property is not an array, or if the property does not yet exist, it is first set to the empty array. Equivalent numbers of different types (e.g. 3L and 3.0) are considered equal when checking if a value is missing. NaN is equal to NaN, and the null value is equal to the null value. If the input contains multiple equivalent values, only the first will be considered. The corresponding transform result will be the null value.
  *   `increment` (*type:* `GoogleApi.Datastore.V1.Model.Value.t`, *default:* `nil`) - Adds the given value to the property's current value. This must be an integer or a double value. If the property is not an integer or double, or if the property does not yet exist, the transformation will set the property to the given value. If either of the given value or the current property value are doubles, both values will be interpreted as doubles. Double arithmetic and representation of double values follows IEEE 754 semantics. If there is positive/negative integer overflow, the property is resolved to the largest magnitude positive/negative integer.
  *   `maximum` (*type:* `GoogleApi.Datastore.V1.Model.Value.t`, *default:* `nil`) - Sets the property to the maximum of its current value and the given value. This must be an integer or a double value. If the property is not an integer or double, or if the property does not yet exist, the transformation will set the property to the given value. If a maximum operation is applied where the property and the input value are of mixed types (that is - one is an integer and one is a double) the property takes on the type of the larger operand. If the operands are equivalent (e.g. 3 and 3.0), the property does not change. 0, 0.0, and -0.0 are all zero. The maximum of a zero stored value and zero input value is always the stored value. The maximum of any numeric value x and NaN is NaN.
  *   `minimum` (*type:* `GoogleApi.Datastore.V1.Model.Value.t`, *default:* `nil`) - Sets the property to the minimum of its current value and the given value. This must be an integer or a double value. If the property is not an integer or double, or if the property does not yet exist, the transformation will set the property to the input value. If a minimum operation is applied where the property and the input value are of mixed types (that is - one is an integer and one is a double) the property takes on the type of the smaller operand. If the operands are equivalent (e.g. 3 and 3.0), the property does not change. 0, 0.0, and -0.0 are all zero. The minimum of a zero stored value and zero input value is always the stored value. The minimum of any numeric value x and NaN is NaN.
  *   `property` (*type:* `String.t`, *default:* `nil`) - Optional. The name of the property. Property paths (a list of property names separated by dots (`.`)) may be used to refer to properties inside entity values. For example `foo.bar` means the property `bar` inside the entity property `foo`. If a property name contains a dot `.` or a backlslash `\\`, then that name must be escaped.
  *   `removeAllFromArray` (*type:* `GoogleApi.Datastore.V1.Model.ArrayValue.t`, *default:* `nil`) - Removes all of the given elements from the array in the property. If the property is not an array, or if the property does not yet exist, it is set to the empty array. Equivalent numbers of different types (e.g. 3L and 3.0) are considered equal when deciding whether an element should be removed. NaN is equal to NaN, and the null value is equal to the null value. This will remove all equivalent values if there are duplicates. The corresponding transform result will be the null value.
  *   `setToServerValue` (*type:* `String.t`, *default:* `nil`) - Sets the property to the given server value.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :appendMissingElements => GoogleApi.Datastore.V1.Model.ArrayValue.t() | nil,
          :increment => GoogleApi.Datastore.V1.Model.Value.t() | nil,
          :maximum => GoogleApi.Datastore.V1.Model.Value.t() | nil,
          :minimum => GoogleApi.Datastore.V1.Model.Value.t() | nil,
          :property => String.t() | nil,
          :removeAllFromArray => GoogleApi.Datastore.V1.Model.ArrayValue.t() | nil,
          :setToServerValue => String.t() | nil
        }

  field(:appendMissingElements, as: GoogleApi.Datastore.V1.Model.ArrayValue)
  field(:increment, as: GoogleApi.Datastore.V1.Model.Value)
  field(:maximum, as: GoogleApi.Datastore.V1.Model.Value)
  field(:minimum, as: GoogleApi.Datastore.V1.Model.Value)
  field(:property)
  field(:removeAllFromArray, as: GoogleApi.Datastore.V1.Model.ArrayValue)
  field(:setToServerValue)
end

defimpl Poison.Decoder, for: GoogleApi.Datastore.V1.Model.PropertyTransform do
  def decode(value, options) do
    GoogleApi.Datastore.V1.Model.PropertyTransform.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Datastore.V1.Model.PropertyTransform do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
