# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.AlloyDB.V1.Model.SqlExportOptions do
  @moduledoc """
  Options for exporting data in SQL format.

  ## Attributes

  *   `cleanTargetObjects` (*type:* `boolean()`, *default:* `nil`) - Optional. If true, output commands to DROP all the dumped database objects prior to outputting the commands for creating them.
  *   `ifExistTargetObjects` (*type:* `boolean()`, *default:* `nil`) - Optional. If true, use DROP ... IF EXISTS commands to check for the object's existence before dropping it in clean_target_objects mode.
  *   `schemaOnly` (*type:* `boolean()`, *default:* `nil`) - Optional. If true, only export the schema.
  *   `tables` (*type:* `list(String.t)`, *default:* `nil`) - Optional. Tables to export from.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :cleanTargetObjects => boolean() | nil,
          :ifExistTargetObjects => boolean() | nil,
          :schemaOnly => boolean() | nil,
          :tables => list(String.t()) | nil
        }

  field(:cleanTargetObjects)
  field(:ifExistTargetObjects)
  field(:schemaOnly)
  field(:tables, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.AlloyDB.V1.Model.SqlExportOptions do
  def decode(value, options) do
    GoogleApi.AlloyDB.V1.Model.SqlExportOptions.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.AlloyDB.V1.Model.SqlExportOptions do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
