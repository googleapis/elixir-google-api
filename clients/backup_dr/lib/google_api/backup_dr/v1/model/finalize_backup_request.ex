# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.BackupDR.V1.Model.FinalizeBackupRequest do
  @moduledoc """
  Message for finalizing a Backup.

  ## Attributes

  *   `backupId` (*type:* `String.t`, *default:* `nil`) - Required. Resource ID of the Backup resource to be finalized. This must be the same backup_id that was used in the InitiateBackupRequest.
  *   `consistencyTime` (*type:* `DateTime.t`, *default:* `nil`) - The point in time when this backup was captured from the source. This will be assigned to the consistency_time field of the newly created Backup.
  *   `description` (*type:* `String.t`, *default:* `nil`) - This will be assigned to the description field of the newly created Backup.
  *   `recoveryRangeEndTime` (*type:* `DateTime.t`, *default:* `nil`) - The latest timestamp of data available in this Backup. This will be set on the newly created Backup.
  *   `recoveryRangeStartTime` (*type:* `DateTime.t`, *default:* `nil`) - The earliest timestamp of data available in this Backup. This will set on the newly created Backup.
  *   `requestId` (*type:* `String.t`, *default:* `nil`) - Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
  *   `retentionDuration` (*type:* `String.t`, *default:* `nil`) - The ExpireTime on the backup will be set to FinalizeTime plus this duration. If the resulting ExpireTime is less than EnforcedRetentionEndTime, then ExpireTime is set to EnforcedRetentionEndTime.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :backupId => String.t() | nil,
          :consistencyTime => DateTime.t() | nil,
          :description => String.t() | nil,
          :recoveryRangeEndTime => DateTime.t() | nil,
          :recoveryRangeStartTime => DateTime.t() | nil,
          :requestId => String.t() | nil,
          :retentionDuration => String.t() | nil
        }

  field(:backupId)
  field(:consistencyTime, as: DateTime)
  field(:description)
  field(:recoveryRangeEndTime, as: DateTime)
  field(:recoveryRangeStartTime, as: DateTime)
  field(:requestId)
  field(:retentionDuration)
end

defimpl Poison.Decoder, for: GoogleApi.BackupDR.V1.Model.FinalizeBackupRequest do
  def decode(value, options) do
    GoogleApi.BackupDR.V1.Model.FinalizeBackupRequest.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.BackupDR.V1.Model.FinalizeBackupRequest do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
