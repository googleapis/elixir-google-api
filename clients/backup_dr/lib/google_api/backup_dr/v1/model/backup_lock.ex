# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.BackupDR.V1.Model.BackupLock do
  @moduledoc """
  BackupLock represents a single lock on a Backup resource. An unexpired lock on a Backup prevents the Backup from being deleted.

  ## Attributes

  *   `backupApplianceLockInfo` (*type:* `GoogleApi.BackupDR.V1.Model.BackupApplianceLockInfo.t`, *default:* `nil`) - If the client is a backup and recovery appliance, this contains metadata about why the lock exists.
  *   `lockUntilTime` (*type:* `DateTime.t`, *default:* `nil`) - Required. The time after which this lock is not considered valid and will no longer protect the Backup from deletion.
  *   `serviceLockInfo` (*type:* `GoogleApi.BackupDR.V1.Model.ServiceLockInfo.t`, *default:* `nil`) - Output only. Contains metadata about the lock exist for Google Cloud native backups.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :backupApplianceLockInfo =>
            GoogleApi.BackupDR.V1.Model.BackupApplianceLockInfo.t() | nil,
          :lockUntilTime => DateTime.t() | nil,
          :serviceLockInfo => GoogleApi.BackupDR.V1.Model.ServiceLockInfo.t() | nil
        }

  field(:backupApplianceLockInfo, as: GoogleApi.BackupDR.V1.Model.BackupApplianceLockInfo)
  field(:lockUntilTime, as: DateTime)
  field(:serviceLockInfo, as: GoogleApi.BackupDR.V1.Model.ServiceLockInfo)
end

defimpl Poison.Decoder, for: GoogleApi.BackupDR.V1.Model.BackupLock do
  def decode(value, options) do
    GoogleApi.BackupDR.V1.Model.BackupLock.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.BackupDR.V1.Model.BackupLock do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
