# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.WorkloadManager.V1.Model.SapWorkload do
  @moduledoc """
  The body of sap workload

  ## Attributes

  *   `application` (*type:* `GoogleApi.WorkloadManager.V1.Model.SapComponent.t`, *default:* `nil`) - Output only. the acsc componment
  *   `architecture` (*type:* `String.t`, *default:* `nil`) - Output only. the architecture
  *   `database` (*type:* `GoogleApi.WorkloadManager.V1.Model.SapComponent.t`, *default:* `nil`) - Output only. the database componment
  *   `metadata` (*type:* `map()`, *default:* `nil`) - Output only. The metadata for SAP workload.
  *   `products` (*type:* `list(GoogleApi.WorkloadManager.V1.Model.Product.t)`, *default:* `nil`) - Output only. the products on this workload.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :application => GoogleApi.WorkloadManager.V1.Model.SapComponent.t() | nil,
          :architecture => String.t() | nil,
          :database => GoogleApi.WorkloadManager.V1.Model.SapComponent.t() | nil,
          :metadata => map() | nil,
          :products => list(GoogleApi.WorkloadManager.V1.Model.Product.t()) | nil
        }

  field(:application, as: GoogleApi.WorkloadManager.V1.Model.SapComponent)
  field(:architecture)
  field(:database, as: GoogleApi.WorkloadManager.V1.Model.SapComponent)
  field(:metadata, type: :map)
  field(:products, as: GoogleApi.WorkloadManager.V1.Model.Product, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.WorkloadManager.V1.Model.SapWorkload do
  def decode(value, options) do
    GoogleApi.WorkloadManager.V1.Model.SapWorkload.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.WorkloadManager.V1.Model.SapWorkload do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
