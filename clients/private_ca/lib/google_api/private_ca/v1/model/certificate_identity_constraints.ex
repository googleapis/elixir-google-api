# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.PrivateCA.V1.Model.CertificateIdentityConstraints do
  @moduledoc """
  Describes constraints on a Certificate's Subject and SubjectAltNames.

  ## Attributes

  *   `allowSubjectAltNamesPassthrough` (*type:* `boolean()`, *default:* `nil`) - Required. If this is true, the SubjectAltNames extension may be copied from a certificate request into the signed certificate. Otherwise, the requested SubjectAltNames will be discarded.
  *   `allowSubjectPassthrough` (*type:* `boolean()`, *default:* `nil`) - Required. If this is true, the Subject field may be copied from a certificate request into the signed certificate. Otherwise, the requested Subject will be discarded.
  *   `celExpression` (*type:* `GoogleApi.PrivateCA.V1.Model.Expr.t`, *default:* `nil`) - Optional. A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a certificate is signed. To see the full allowed syntax and some examples, see https://cloud.google.com/certificate-authority-service/docs/using-cel
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :allowSubjectAltNamesPassthrough => boolean() | nil,
          :allowSubjectPassthrough => boolean() | nil,
          :celExpression => GoogleApi.PrivateCA.V1.Model.Expr.t() | nil
        }

  field(:allowSubjectAltNamesPassthrough)
  field(:allowSubjectPassthrough)
  field(:celExpression, as: GoogleApi.PrivateCA.V1.Model.Expr)
end

defimpl Poison.Decoder, for: GoogleApi.PrivateCA.V1.Model.CertificateIdentityConstraints do
  def decode(value, options) do
    GoogleApi.PrivateCA.V1.Model.CertificateIdentityConstraints.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.PrivateCA.V1.Model.CertificateIdentityConstraints do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
