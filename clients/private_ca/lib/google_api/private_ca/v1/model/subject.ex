# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.PrivateCA.V1.Model.Subject do
  @moduledoc """
  Subject describes parts of a distinguished name that, in turn, describes the subject of the certificate.

  ## Attributes

  *   `commonName` (*type:* `String.t`, *default:* `nil`) - The "common name" of the subject.
  *   `countryCode` (*type:* `String.t`, *default:* `nil`) - The country code of the subject.
  *   `locality` (*type:* `String.t`, *default:* `nil`) - The locality or city of the subject.
  *   `organization` (*type:* `String.t`, *default:* `nil`) - The organization of the subject.
  *   `organizationalUnit` (*type:* `String.t`, *default:* `nil`) - The organizational_unit of the subject.
  *   `postalCode` (*type:* `String.t`, *default:* `nil`) - The postal code of the subject.
  *   `province` (*type:* `String.t`, *default:* `nil`) - The province, territory, or regional state of the subject.
  *   `streetAddress` (*type:* `String.t`, *default:* `nil`) - The street address of the subject.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :commonName => String.t() | nil,
          :countryCode => String.t() | nil,
          :locality => String.t() | nil,
          :organization => String.t() | nil,
          :organizationalUnit => String.t() | nil,
          :postalCode => String.t() | nil,
          :province => String.t() | nil,
          :streetAddress => String.t() | nil
        }

  field(:commonName)
  field(:countryCode)
  field(:locality)
  field(:organization)
  field(:organizationalUnit)
  field(:postalCode)
  field(:province)
  field(:streetAddress)
end

defimpl Poison.Decoder, for: GoogleApi.PrivateCA.V1.Model.Subject do
  def decode(value, options) do
    GoogleApi.PrivateCA.V1.Model.Subject.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.PrivateCA.V1.Model.Subject do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
