# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.GKEHub.V1.Model.CommonFeatureState do
  @moduledoc """
  CommonFeatureState contains Fleet-wide Feature status information.

  ## Attributes

  *   `appdevexperience` (*type:* `GoogleApi.GKEHub.V1.Model.AppDevExperienceFeatureState.t`, *default:* `nil`) - Appdevexperience specific state.
  *   `clusterupgrade` (*type:* `GoogleApi.GKEHub.V1.Model.ClusterUpgradeFleetState.t`, *default:* `nil`) - ClusterUpgrade fleet-level state.
  *   `fleetobservability` (*type:* `GoogleApi.GKEHub.V1.Model.FleetObservabilityFeatureState.t`, *default:* `nil`) - FleetObservability feature state.
  *   `state` (*type:* `GoogleApi.GKEHub.V1.Model.FeatureState.t`, *default:* `nil`) - Output only. The "running state" of the Feature in this Fleet.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :appdevexperience => GoogleApi.GKEHub.V1.Model.AppDevExperienceFeatureState.t() | nil,
          :clusterupgrade => GoogleApi.GKEHub.V1.Model.ClusterUpgradeFleetState.t() | nil,
          :fleetobservability =>
            GoogleApi.GKEHub.V1.Model.FleetObservabilityFeatureState.t() | nil,
          :state => GoogleApi.GKEHub.V1.Model.FeatureState.t() | nil
        }

  field(:appdevexperience, as: GoogleApi.GKEHub.V1.Model.AppDevExperienceFeatureState)
  field(:clusterupgrade, as: GoogleApi.GKEHub.V1.Model.ClusterUpgradeFleetState)
  field(:fleetobservability, as: GoogleApi.GKEHub.V1.Model.FleetObservabilityFeatureState)
  field(:state, as: GoogleApi.GKEHub.V1.Model.FeatureState)
end

defimpl Poison.Decoder, for: GoogleApi.GKEHub.V1.Model.CommonFeatureState do
  def decode(value, options) do
    GoogleApi.GKEHub.V1.Model.CommonFeatureState.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.GKEHub.V1.Model.CommonFeatureState do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
