# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Integrations.V1.Model.EnterpriseCrmLoggingGwsSanitizeOptions do
  @moduledoc """
  Identifies whether a field contains, or may contain, PII or sensitive data, and how to sanitize the field if it does. If a field's privacy type cannot be determined then it is sanitized (e.g., scrubbed). The specific sanitizer implementation is determined by run-time configuration and environment options (e.g., prod vs. qa). next_id: 5

  ## Attributes

  *   `isAlreadySanitized` (*type:* `boolean()`, *default:* `nil`) - If true, the value has already been sanitized and needs no further sanitization. For instance, a D3 customer id is already an obfuscated entity and *might not* need further sanitization.
  *   `logType` (*type:* `list(String.t)`, *default:* `nil`) - To which type(s) of logs the sanitize options apply.
  *   `privacy` (*type:* `String.t`, *default:* `nil`) - 
  *   `sanitizeType` (*type:* `String.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :isAlreadySanitized => boolean() | nil,
          :logType => list(String.t()) | nil,
          :privacy => String.t() | nil,
          :sanitizeType => String.t() | nil
        }

  field(:isAlreadySanitized)
  field(:logType, type: :list)
  field(:privacy)
  field(:sanitizeType)
end

defimpl Poison.Decoder,
  for: GoogleApi.Integrations.V1.Model.EnterpriseCrmLoggingGwsSanitizeOptions do
  def decode(value, options) do
    GoogleApi.Integrations.V1.Model.EnterpriseCrmLoggingGwsSanitizeOptions.decode(value, options)
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.Integrations.V1.Model.EnterpriseCrmLoggingGwsSanitizeOptions do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
