# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Monitoring.V3.Model.DistributionCut do
  @moduledoc """
  A DistributionCut defines a TimeSeries and thresholds used for measuring good service and total service. The TimeSeries must have ValueType = DISTRIBUTION and MetricKind = DELTA or MetricKind = CUMULATIVE. The computed good_service will be the estimated count of values in the Distribution that fall within the specified min and max.

  ## Attributes

  *   `distributionFilter` (*type:* `String.t`, *default:* `nil`) - A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries aggregating values. Must have ValueType = DISTRIBUTION and MetricKind = DELTA or MetricKind = CUMULATIVE.
  *   `range` (*type:* `GoogleApi.Monitoring.V3.Model.GoogleMonitoringV3Range.t`, *default:* `nil`) - Range of values considered "good." For a one-sided range, set one bound to an infinite value.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :distributionFilter => String.t() | nil,
          :range => GoogleApi.Monitoring.V3.Model.GoogleMonitoringV3Range.t() | nil
        }

  field(:distributionFilter)
  field(:range, as: GoogleApi.Monitoring.V3.Model.GoogleMonitoringV3Range)
end

defimpl Poison.Decoder, for: GoogleApi.Monitoring.V3.Model.DistributionCut do
  def decode(value, options) do
    GoogleApi.Monitoring.V3.Model.DistributionCut.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Monitoring.V3.Model.DistributionCut do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
