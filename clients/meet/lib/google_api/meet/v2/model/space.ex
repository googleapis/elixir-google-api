# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Meet.V2.Model.Space do
  @moduledoc """
  Virtual place where conferences are held. Only one active conference can be held in one space at any given time.

  ## Attributes

  *   `activeConference` (*type:* `GoogleApi.Meet.V2.Model.ActiveConference.t`, *default:* `nil`) - Active conference, if it exists.
  *   `config` (*type:* `GoogleApi.Meet.V2.Model.SpaceConfig.t`, *default:* `nil`) - Configuration pertaining to the meeting space.
  *   `meetingCode` (*type:* `String.t`, *default:* `nil`) - Output only. Type friendly unique string used to join the meeting. Format: `[a-z]+-[a-z]+-[a-z]+`. For example, `abc-mnop-xyz`. The maximum length is 128 characters. Can only be used as an alias of the space name to get the space.
  *   `meetingUri` (*type:* `String.t`, *default:* `nil`) - Output only. URI used to join meetings consisting of `https://meet.google.com/` followed by the `meeting_code`. For example, `https://meet.google.com/abc-mnop-xyz`.
  *   `name` (*type:* `String.t`, *default:* `nil`) - Immutable. Resource name of the space. Format: `spaces/{space}`. `{space}` is the resource identifier for the space. It's a unique, server-generated ID and is case sensitive. For example, `jQCFfuBOdN5z`. For more information, see [How Meet identifies a meeting space](https://developers.google.com/meet/api/guides/meeting-spaces#identify-meeting-space).
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :activeConference => GoogleApi.Meet.V2.Model.ActiveConference.t() | nil,
          :config => GoogleApi.Meet.V2.Model.SpaceConfig.t() | nil,
          :meetingCode => String.t() | nil,
          :meetingUri => String.t() | nil,
          :name => String.t() | nil
        }

  field(:activeConference, as: GoogleApi.Meet.V2.Model.ActiveConference)
  field(:config, as: GoogleApi.Meet.V2.Model.SpaceConfig)
  field(:meetingCode)
  field(:meetingUri)
  field(:name)
end

defimpl Poison.Decoder, for: GoogleApi.Meet.V2.Model.Space do
  def decode(value, options) do
    GoogleApi.Meet.V2.Model.Space.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Meet.V2.Model.Space do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
