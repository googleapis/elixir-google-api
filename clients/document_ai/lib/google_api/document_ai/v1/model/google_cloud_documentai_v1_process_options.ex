# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.DocumentAI.V1.Model.GoogleCloudDocumentaiV1ProcessOptions do
  @moduledoc """
  Options for Process API

  ## Attributes

  *   `fromEnd` (*type:* `integer()`, *default:* `nil`) - Only process certain pages from the end, same as above.
  *   `fromStart` (*type:* `integer()`, *default:* `nil`) - Only process certain pages from the start. Process all if the document has fewer pages.
  *   `individualPageSelector` (*type:* `GoogleApi.DocumentAI.V1.Model.GoogleCloudDocumentaiV1ProcessOptionsIndividualPageSelector.t`, *default:* `nil`) - Which pages to process (1-indexed).
  *   `layoutConfig` (*type:* `GoogleApi.DocumentAI.V1.Model.GoogleCloudDocumentaiV1ProcessOptionsLayoutConfig.t`, *default:* `nil`) - Optional. Only applicable to `LAYOUT_PARSER_PROCESSOR`. Returns error if set on other processor types.
  *   `ocrConfig` (*type:* `GoogleApi.DocumentAI.V1.Model.GoogleCloudDocumentaiV1OcrConfig.t`, *default:* `nil`) - Only applicable to `OCR_PROCESSOR` and `FORM_PARSER_PROCESSOR`. Returns error if set on other processor types.
  *   `schemaOverride` (*type:* `GoogleApi.DocumentAI.V1.Model.GoogleCloudDocumentaiV1DocumentSchema.t`, *default:* `nil`) - Optional. Override the schema of the ProcessorVersion. Will return an Invalid Argument error if this field is set when the underlying ProcessorVersion doesn't support schema override.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :fromEnd => integer() | nil,
          :fromStart => integer() | nil,
          :individualPageSelector =>
            GoogleApi.DocumentAI.V1.Model.GoogleCloudDocumentaiV1ProcessOptionsIndividualPageSelector.t()
            | nil,
          :layoutConfig =>
            GoogleApi.DocumentAI.V1.Model.GoogleCloudDocumentaiV1ProcessOptionsLayoutConfig.t()
            | nil,
          :ocrConfig => GoogleApi.DocumentAI.V1.Model.GoogleCloudDocumentaiV1OcrConfig.t() | nil,
          :schemaOverride =>
            GoogleApi.DocumentAI.V1.Model.GoogleCloudDocumentaiV1DocumentSchema.t() | nil
        }

  field(:fromEnd)
  field(:fromStart)

  field(:individualPageSelector,
    as: GoogleApi.DocumentAI.V1.Model.GoogleCloudDocumentaiV1ProcessOptionsIndividualPageSelector
  )

  field(:layoutConfig,
    as: GoogleApi.DocumentAI.V1.Model.GoogleCloudDocumentaiV1ProcessOptionsLayoutConfig
  )

  field(:ocrConfig, as: GoogleApi.DocumentAI.V1.Model.GoogleCloudDocumentaiV1OcrConfig)
  field(:schemaOverride, as: GoogleApi.DocumentAI.V1.Model.GoogleCloudDocumentaiV1DocumentSchema)
end

defimpl Poison.Decoder, for: GoogleApi.DocumentAI.V1.Model.GoogleCloudDocumentaiV1ProcessOptions do
  def decode(value, options) do
    GoogleApi.DocumentAI.V1.Model.GoogleCloudDocumentaiV1ProcessOptions.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.DocumentAI.V1.Model.GoogleCloudDocumentaiV1ProcessOptions do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
