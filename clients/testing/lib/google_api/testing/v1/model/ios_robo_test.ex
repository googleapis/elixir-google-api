# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Testing.V1.Model.IosRoboTest do
  @moduledoc """
  A test that explores an iOS application on an iOS device.

  ## Attributes

  *   `appBundleId` (*type:* `String.t`, *default:* `nil`) - The bundle ID for the app-under-test. This is determined by examining the application's "Info.plist" file.
  *   `appIpa` (*type:* `GoogleApi.Testing.V1.Model.FileReference.t`, *default:* `nil`) - Required. The ipa stored at this file should be used to run the test.
  *   `roboScript` (*type:* `GoogleApi.Testing.V1.Model.FileReference.t`, *default:* `nil`) - An optional Roboscript to customize the crawl. See https://firebase.google.com/docs/test-lab/android/robo-scripts-reference for more information about Roboscripts. The maximum allowed file size of the roboscript is 10MiB.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :appBundleId => String.t() | nil,
          :appIpa => GoogleApi.Testing.V1.Model.FileReference.t() | nil,
          :roboScript => GoogleApi.Testing.V1.Model.FileReference.t() | nil
        }

  field(:appBundleId)
  field(:appIpa, as: GoogleApi.Testing.V1.Model.FileReference)
  field(:roboScript, as: GoogleApi.Testing.V1.Model.FileReference)
end

defimpl Poison.Decoder, for: GoogleApi.Testing.V1.Model.IosRoboTest do
  def decode(value, options) do
    GoogleApi.Testing.V1.Model.IosRoboTest.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Testing.V1.Model.IosRoboTest do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
