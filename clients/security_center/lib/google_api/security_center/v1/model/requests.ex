# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.SecurityCenter.V1.Model.Requests do
  @moduledoc """
  Information about the requests relevant to the finding.

  ## Attributes

  *   `longTermAllowed` (*type:* `integer()`, *default:* `nil`) - Allowed RPS (requests per second) over the long term.
  *   `longTermDenied` (*type:* `integer()`, *default:* `nil`) - Denied RPS (requests per second) over the long term.
  *   `ratio` (*type:* `float()`, *default:* `nil`) - For 'Increasing deny ratio', the ratio is the denied traffic divided by the allowed traffic. For 'Allowed traffic spike', the ratio is the allowed traffic in the short term divided by allowed traffic in the long term.
  *   `shortTermAllowed` (*type:* `integer()`, *default:* `nil`) - Allowed RPS (requests per second) in the short term.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :longTermAllowed => integer() | nil,
          :longTermDenied => integer() | nil,
          :ratio => float() | nil,
          :shortTermAllowed => integer() | nil
        }

  field(:longTermAllowed)
  field(:longTermDenied)
  field(:ratio)
  field(:shortTermAllowed)
end

defimpl Poison.Decoder, for: GoogleApi.SecurityCenter.V1.Model.Requests do
  def decode(value, options) do
    GoogleApi.SecurityCenter.V1.Model.Requests.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.SecurityCenter.V1.Model.Requests do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
