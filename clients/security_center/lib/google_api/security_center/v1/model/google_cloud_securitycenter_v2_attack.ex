# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.SecurityCenter.V1.Model.GoogleCloudSecuritycenterV2Attack do
  @moduledoc """
  Information about DDoS attack volume and classification.

  ## Attributes

  *   `classification` (*type:* `String.t`, *default:* `nil`) - Type of attack, for example, 'SYN-flood', 'NTP-udp', or 'CHARGEN-udp'.
  *   `volumeBps` (*type:* `integer()`, *default:* `nil`) - Total BPS (bytes per second) volume of attack. Deprecated - refer to volume_bps_long instead.
  *   `volumeBpsLong` (*type:* `String.t`, *default:* `nil`) - Total BPS (bytes per second) volume of attack.
  *   `volumePps` (*type:* `integer()`, *default:* `nil`) - Total PPS (packets per second) volume of attack. Deprecated - refer to volume_pps_long instead.
  *   `volumePpsLong` (*type:* `String.t`, *default:* `nil`) - Total PPS (packets per second) volume of attack.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :classification => String.t() | nil,
          :volumeBps => integer() | nil,
          :volumeBpsLong => String.t() | nil,
          :volumePps => integer() | nil,
          :volumePpsLong => String.t() | nil
        }

  field(:classification)
  field(:volumeBps)
  field(:volumeBpsLong)
  field(:volumePps)
  field(:volumePpsLong)
end

defimpl Poison.Decoder, for: GoogleApi.SecurityCenter.V1.Model.GoogleCloudSecuritycenterV2Attack do
  def decode(value, options) do
    GoogleApi.SecurityCenter.V1.Model.GoogleCloudSecuritycenterV2Attack.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.SecurityCenter.V1.Model.GoogleCloudSecuritycenterV2Attack do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
