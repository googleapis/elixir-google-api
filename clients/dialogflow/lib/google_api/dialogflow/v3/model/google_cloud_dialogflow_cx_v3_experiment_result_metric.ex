# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Dialogflow.V3.Model.GoogleCloudDialogflowCxV3ExperimentResultMetric do
  @moduledoc """
  Metric and corresponding confidence intervals.

  ## Attributes

  *   `confidenceInterval` (*type:* `GoogleApi.Dialogflow.V3.Model.GoogleCloudDialogflowCxV3ExperimentResultConfidenceInterval.t`, *default:* `nil`) - The probability that the treatment is better than all other treatments in the experiment
  *   `count` (*type:* `float()`, *default:* `nil`) - Count value of a metric.
  *   `countType` (*type:* `String.t`, *default:* `nil`) - Count-based metric type. Only one of type or count_type is specified in each Metric.
  *   `ratio` (*type:* `float()`, *default:* `nil`) - Ratio value of a metric.
  *   `type` (*type:* `String.t`, *default:* `nil`) - Ratio-based metric type. Only one of type or count_type is specified in each Metric.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :confidenceInterval =>
            GoogleApi.Dialogflow.V3.Model.GoogleCloudDialogflowCxV3ExperimentResultConfidenceInterval.t()
            | nil,
          :count => float() | nil,
          :countType => String.t() | nil,
          :ratio => float() | nil,
          :type => String.t() | nil
        }

  field(:confidenceInterval,
    as: GoogleApi.Dialogflow.V3.Model.GoogleCloudDialogflowCxV3ExperimentResultConfidenceInterval
  )

  field(:count)
  field(:countType)
  field(:ratio)
  field(:type)
end

defimpl Poison.Decoder,
  for: GoogleApi.Dialogflow.V3.Model.GoogleCloudDialogflowCxV3ExperimentResultMetric do
  def decode(value, options) do
    GoogleApi.Dialogflow.V3.Model.GoogleCloudDialogflowCxV3ExperimentResultMetric.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.Dialogflow.V3.Model.GoogleCloudDialogflowCxV3ExperimentResultMetric do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
