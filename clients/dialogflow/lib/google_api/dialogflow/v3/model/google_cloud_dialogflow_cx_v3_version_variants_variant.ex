# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Dialogflow.V3.Model.GoogleCloudDialogflowCxV3VersionVariantsVariant do
  @moduledoc """
  A single flow version with specified traffic allocation.

  ## Attributes

  *   `isControlGroup` (*type:* `boolean()`, *default:* `nil`) - Whether the variant is for the control group.
  *   `trafficAllocation` (*type:* `number()`, *default:* `nil`) - Percentage of the traffic which should be routed to this version of flow. Traffic allocation for a single flow must sum up to 1.0.
  *   `version` (*type:* `String.t`, *default:* `nil`) - The name of the flow version. Format: `projects//locations//agents//flows//versions/`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :isControlGroup => boolean() | nil,
          :trafficAllocation => number() | nil,
          :version => String.t() | nil
        }

  field(:isControlGroup)
  field(:trafficAllocation)
  field(:version)
end

defimpl Poison.Decoder,
  for: GoogleApi.Dialogflow.V3.Model.GoogleCloudDialogflowCxV3VersionVariantsVariant do
  def decode(value, options) do
    GoogleApi.Dialogflow.V3.Model.GoogleCloudDialogflowCxV3VersionVariantsVariant.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.Dialogflow.V3.Model.GoogleCloudDialogflowCxV3VersionVariantsVariant do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
