# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Dialogflow.V3.Model.GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCase do
  @moduledoc """
  Each case has a Boolean condition. When it is evaluated to be True, the corresponding messages will be selected and evaluated recursively.

  ## Attributes

  *   `caseContent` (*type:* `list(GoogleApi.Dialogflow.V3.Model.GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseCaseContent.t)`, *default:* `nil`) - A list of case content.
  *   `condition` (*type:* `String.t`, *default:* `nil`) - The condition to activate and select this case. Empty means the condition is always true. The condition is evaluated against form parameters or session parameters. See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :caseContent =>
            list(
              GoogleApi.Dialogflow.V3.Model.GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseCaseContent.t()
            )
            | nil,
          :condition => String.t() | nil
        }

  field(:caseContent,
    as:
      GoogleApi.Dialogflow.V3.Model.GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseCaseContent,
    type: :list
  )

  field(:condition)
end

defimpl Poison.Decoder,
  for: GoogleApi.Dialogflow.V3.Model.GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCase do
  def decode(value, options) do
    GoogleApi.Dialogflow.V3.Model.GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCase.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.Dialogflow.V3.Model.GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCase do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
