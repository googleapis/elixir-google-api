# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Dialogflow.V2.Model.GoogleCloudDialogflowV2ReloadDocumentRequest do
  @moduledoc """
  Request message for Documents.ReloadDocument.

  ## Attributes

  *   `contentUri` (*type:* `String.t`, *default:* `nil`) - Optional. The path of gcs source file for reloading document content. For now, only gcs uri is supported. For documents stored in Google Cloud Storage, these URIs must have the form `gs:///`.
  *   `importGcsCustomMetadata` (*type:* `boolean()`, *default:* `nil`) - Optional. Whether to import custom metadata from Google Cloud Storage. Only valid when the document source is Google Cloud Storage URI.
  *   `smartMessagingPartialUpdate` (*type:* `boolean()`, *default:* `nil`) - Optional. When enabled, the reload request is to apply partial update to the smart messaging allowlist.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :contentUri => String.t() | nil,
          :importGcsCustomMetadata => boolean() | nil,
          :smartMessagingPartialUpdate => boolean() | nil
        }

  field(:contentUri)
  field(:importGcsCustomMetadata)
  field(:smartMessagingPartialUpdate)
end

defimpl Poison.Decoder,
  for: GoogleApi.Dialogflow.V2.Model.GoogleCloudDialogflowV2ReloadDocumentRequest do
  def decode(value, options) do
    GoogleApi.Dialogflow.V2.Model.GoogleCloudDialogflowV2ReloadDocumentRequest.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.Dialogflow.V2.Model.GoogleCloudDialogflowV2ReloadDocumentRequest do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
