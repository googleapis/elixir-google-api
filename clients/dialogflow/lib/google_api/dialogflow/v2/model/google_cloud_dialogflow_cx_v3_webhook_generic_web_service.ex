# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Dialogflow.V2.Model.GoogleCloudDialogflowCxV3WebhookGenericWebService do
  @moduledoc """
  Represents configuration for a generic web service.

  ## Attributes

  *   `allowedCaCerts` (*type:* `list(String.t)`, *default:* `nil`) - Optional. Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification. This overrides the default SSL trust store. If this is empty or unspecified, Dialogflow will use Google's default trust store to verify certificates. N.B. Make sure the HTTPS server certificates are signed with "subject alt name". For instance a certificate can be self-signed using the following command, ``` openssl x509 -req -days 200 -in example.com.csr \\ -signkey example.com.key \\ -out example.com.crt \\ -extfile <(printf "\\nsubjectAltName='DNS:www.example.com'") ```
  *   `httpMethod` (*type:* `String.t`, *default:* `nil`) - Optional. HTTP method for the flexible webhook calls. Standard webhook always uses POST.
  *   `oauthConfig` (*type:* `GoogleApi.Dialogflow.V2.Model.GoogleCloudDialogflowCxV3WebhookGenericWebServiceOAuthConfig.t`, *default:* `nil`) - Optional. The OAuth configuration of the webhook. If specified, Dialogflow will initiate the OAuth client credential flow to exchange an access token from the 3rd party platform and put it in the auth header.
  *   `parameterMapping` (*type:* `map()`, *default:* `nil`) - Optional. Maps the values extracted from specific fields of the flexible webhook response into session parameters. - Key: session parameter name - Value: field path in the webhook response
  *   `password` (*type:* `String.t`, *default:* `nil`) - The password for HTTP Basic authentication.
  *   `requestBody` (*type:* `String.t`, *default:* `nil`) - Optional. Defines a custom JSON object as request body to send to flexible webhook.
  *   `requestHeaders` (*type:* `map()`, *default:* `nil`) - The HTTP request headers to send together with webhook requests.
  *   `secretVersionForUsernamePassword` (*type:* `String.t`, *default:* `nil`) - Optional. The SecretManager secret version resource storing the username:password pair for HTTP Basic authentication. Format: `projects/{project}/secrets/{secret}/versions/{version}`
  *   `secretVersionsForRequestHeaders` (*type:* `%{optional(String.t) => GoogleApi.Dialogflow.V2.Model.GoogleCloudDialogflowCxV3WebhookGenericWebServiceSecretVersionHeaderValue.t}`, *default:* `nil`) - Optional. The HTTP request headers to send together with webhook requests. Header values are stored in SecretManager secret versions. When the same header name is specified in both `request_headers` and `secret_versions_for_request_headers`, the value in `secret_versions_for_request_headers` will be used.
  *   `serviceAgentAuth` (*type:* `String.t`, *default:* `nil`) - Optional. Indicate the auth token type generated from the [Diglogflow service agent](https://cloud.google.com/iam/docs/service-agents#dialogflow-service-agent). The generated token is sent in the Authorization header.
  *   `uri` (*type:* `String.t`, *default:* `nil`) - Required. The webhook URI for receiving POST requests. It must use https protocol.
  *   `username` (*type:* `String.t`, *default:* `nil`) - The user name for HTTP Basic authentication.
  *   `webhookType` (*type:* `String.t`, *default:* `nil`) - Optional. Type of the webhook.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :allowedCaCerts => list(String.t()) | nil,
          :httpMethod => String.t() | nil,
          :oauthConfig =>
            GoogleApi.Dialogflow.V2.Model.GoogleCloudDialogflowCxV3WebhookGenericWebServiceOAuthConfig.t()
            | nil,
          :parameterMapping => map() | nil,
          :password => String.t() | nil,
          :requestBody => String.t() | nil,
          :requestHeaders => map() | nil,
          :secretVersionForUsernamePassword => String.t() | nil,
          :secretVersionsForRequestHeaders =>
            %{
              optional(String.t()) =>
                GoogleApi.Dialogflow.V2.Model.GoogleCloudDialogflowCxV3WebhookGenericWebServiceSecretVersionHeaderValue.t()
            }
            | nil,
          :serviceAgentAuth => String.t() | nil,
          :uri => String.t() | nil,
          :username => String.t() | nil,
          :webhookType => String.t() | nil
        }

  field(:allowedCaCerts, type: :list)
  field(:httpMethod)

  field(:oauthConfig,
    as: GoogleApi.Dialogflow.V2.Model.GoogleCloudDialogflowCxV3WebhookGenericWebServiceOAuthConfig
  )

  field(:parameterMapping, type: :map)
  field(:password)
  field(:requestBody)
  field(:requestHeaders, type: :map)
  field(:secretVersionForUsernamePassword)

  field(:secretVersionsForRequestHeaders,
    as:
      GoogleApi.Dialogflow.V2.Model.GoogleCloudDialogflowCxV3WebhookGenericWebServiceSecretVersionHeaderValue,
    type: :map
  )

  field(:serviceAgentAuth)
  field(:uri)
  field(:username)
  field(:webhookType)
end

defimpl Poison.Decoder,
  for: GoogleApi.Dialogflow.V2.Model.GoogleCloudDialogflowCxV3WebhookGenericWebService do
  def decode(value, options) do
    GoogleApi.Dialogflow.V2.Model.GoogleCloudDialogflowCxV3WebhookGenericWebService.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.Dialogflow.V2.Model.GoogleCloudDialogflowCxV3WebhookGenericWebService do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
