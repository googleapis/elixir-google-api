# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Docs.V1.Model.SubstringMatchCriteria do
  @moduledoc """
  A criteria that matches a specific string of text in the document.

  ## Attributes

  *   `matchCase` (*type:* `boolean()`, *default:* `nil`) - Indicates whether the search should respect case: - `True`: the search is case sensitive. - `False`: the search is case insensitive.
  *   `searchByRegex` (*type:* `boolean()`, *default:* `nil`) - Optional. True if the find value should be treated as a regular expression. Any backslashes in the pattern should be escaped. - `True`: the search text is treated as a regular expressions. - `False`: the search text is treated as a substring for matching.
  *   `text` (*type:* `String.t`, *default:* `nil`) - The text to search for in the document.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :matchCase => boolean() | nil,
          :searchByRegex => boolean() | nil,
          :text => String.t() | nil
        }

  field(:matchCase)
  field(:searchByRegex)
  field(:text)
end

defimpl Poison.Decoder, for: GoogleApi.Docs.V1.Model.SubstringMatchCriteria do
  def decode(value, options) do
    GoogleApi.Docs.V1.Model.SubstringMatchCriteria.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Docs.V1.Model.SubstringMatchCriteria do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
