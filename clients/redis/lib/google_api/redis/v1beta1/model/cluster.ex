# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Redis.V1beta1.Model.Cluster do
  @moduledoc """
  A cluster instance.

  ## Attributes

  *   `clusterUid` (*type:* `String.t`, *default:* `nil`) - Output only. UID of the cluster for use by Pantheon for analytics.
  *   `createTime` (*type:* `DateTime.t`, *default:* `nil`) - Output only. The timestamp associated with the cluster creation request.
  *   `customerManagedKey` (*type:* `String.t`, *default:* `nil`) - Input only. The KMS key reference that the customer provides when trying to create the instance.
  *   `defaultReplicaCount` (*type:* `integer()`, *default:* `nil`) - Optional. The number of replica nodes per shard. Valid range is [1-2] and defaults to 1.
  *   `displayName` (*type:* `String.t`, *default:* `nil`) - Optional. An arbitrary and optional user-provided name for the cluster.
  *   `endpoints` (*type:* `list(GoogleApi.Redis.V1beta1.Model.Endpoint.t)`, *default:* `nil`) - Output only. Hostname or IP address and port pairs used to connect to the cluster.
  *   `name` (*type:* `String.t`, *default:* `nil`) - Required. Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}`
  *   `privateServiceConnect` (*type:* `GoogleApi.Redis.V1beta1.Model.PrivateServiceConnect.t`, *default:* `nil`) - Optional. Populate to use private service connect network option.
  *   `redisConfigs` (*type:* `map()`, *default:* `nil`) - Optional. Redis configuration parameters, according to http://redis.io/topics/config. Currently, the only supported parameters are: Redis version 6.x and newer: * lfu-decay-time * lfu-log-factor * maxmemory-policy
  *   `slots` (*type:* `list(GoogleApi.Redis.V1beta1.Model.ClusterSlots.t)`, *default:* `nil`) - Output only. The slots making up the cluster. Read-only. In future versions this will be writable to allow for heterogeneous clusters.
  *   `state` (*type:* `String.t`, *default:* `nil`) - Output only. The current state of this cluster. Can be CREATING, READY, UPDATING, DELETING and SUSPENDED
  *   `totalMemorySizeGb` (*type:* `integer()`, *default:* `nil`) - Optional. Redis memory size in GiB for the entire cluster. Defaults to 32.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :clusterUid => String.t() | nil,
          :createTime => DateTime.t() | nil,
          :customerManagedKey => String.t() | nil,
          :defaultReplicaCount => integer() | nil,
          :displayName => String.t() | nil,
          :endpoints => list(GoogleApi.Redis.V1beta1.Model.Endpoint.t()) | nil,
          :name => String.t() | nil,
          :privateServiceConnect => GoogleApi.Redis.V1beta1.Model.PrivateServiceConnect.t() | nil,
          :redisConfigs => map() | nil,
          :slots => list(GoogleApi.Redis.V1beta1.Model.ClusterSlots.t()) | nil,
          :state => String.t() | nil,
          :totalMemorySizeGb => integer() | nil
        }

  field(:clusterUid)
  field(:createTime, as: DateTime)
  field(:customerManagedKey)
  field(:defaultReplicaCount)
  field(:displayName)
  field(:endpoints, as: GoogleApi.Redis.V1beta1.Model.Endpoint, type: :list)
  field(:name)
  field(:privateServiceConnect, as: GoogleApi.Redis.V1beta1.Model.PrivateServiceConnect)
  field(:redisConfigs, type: :map)
  field(:slots, as: GoogleApi.Redis.V1beta1.Model.ClusterSlots, type: :list)
  field(:state)
  field(:totalMemorySizeGb)
end

defimpl Poison.Decoder, for: GoogleApi.Redis.V1beta1.Model.Cluster do
  def decode(value, options) do
    GoogleApi.Redis.V1beta1.Model.Cluster.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Redis.V1beta1.Model.Cluster do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
