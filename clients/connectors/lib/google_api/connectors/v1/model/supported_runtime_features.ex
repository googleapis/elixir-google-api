# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Connectors.V1.Model.SupportedRuntimeFeatures do
  @moduledoc """
  Supported runtime features of a connector version. This is passed to the management layer to add a new connector version by the connector developer. Details about how this proto is passed to the management layer is covered in this doc - go/runtime-manifest.

  ## Attributes

  *   `actionApis` (*type:* `boolean()`, *default:* `nil`) - Specifies if the connector supports action apis like 'executeAction'.
  *   `entityApis` (*type:* `boolean()`, *default:* `nil`) - Specifies if the connector supports entity apis like 'createEntity'.
  *   `sqlQuery` (*type:* `boolean()`, *default:* `nil`) - Specifies if the connector supports 'ExecuteSqlQuery' operation.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :actionApis => boolean() | nil,
          :entityApis => boolean() | nil,
          :sqlQuery => boolean() | nil
        }

  field(:actionApis)
  field(:entityApis)
  field(:sqlQuery)
end

defimpl Poison.Decoder, for: GoogleApi.Connectors.V1.Model.SupportedRuntimeFeatures do
  def decode(value, options) do
    GoogleApi.Connectors.V1.Model.SupportedRuntimeFeatures.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Connectors.V1.Model.SupportedRuntimeFeatures do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
