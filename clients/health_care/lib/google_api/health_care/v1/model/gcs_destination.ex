# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.HealthCare.V1.Model.GcsDestination do
  @moduledoc """
  The Cloud Storage output destination. The Cloud Healthcare Service Agent requires the `roles/storage.objectAdmin` Cloud IAM roles on the Cloud Storage location.

  ## Attributes

  *   `contentStructure` (*type:* `String.t`, *default:* `nil`) - The format of the exported HL7v2 message files.
  *   `messageView` (*type:* `String.t`, *default:* `nil`) - Specifies the parts of the Message resource to include in the export. If not specified, FULL is used.
  *   `uriPrefix` (*type:* `String.t`, *default:* `nil`) - URI of an existing Cloud Storage directory where the server writes result files, in the format `gs://{bucket-id}/{path/to/destination/dir}`. If there is no trailing slash, the service appends one when composing the object path.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :contentStructure => String.t() | nil,
          :messageView => String.t() | nil,
          :uriPrefix => String.t() | nil
        }

  field(:contentStructure)
  field(:messageView)
  field(:uriPrefix)
end

defimpl Poison.Decoder, for: GoogleApi.HealthCare.V1.Model.GcsDestination do
  def decode(value, options) do
    GoogleApi.HealthCare.V1.Model.GcsDestination.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.HealthCare.V1.Model.GcsDestination do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
