# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.IAP.V1.Model.GcipSettings do
  @moduledoc """
  Allows customers to configure tenant_id for GCIP instance per-app.

  ## Attributes

  *   `loginPageUri` (*type:* `String.t`, *default:* `nil`) - Login page URI associated with the GCIP tenants. Typically, all resources within the same project share the same login page, though it could be overridden at the sub resource level.
  *   `tenantIds` (*type:* `list(String.t)`, *default:* `nil`) - Optional. GCIP tenant ids that are linked to the IAP resource. tenant_ids could be a string beginning with a number character to indicate authenticating with GCIP tenant flow, or in the format of _ to indicate authenticating with GCIP agent flow. If agent flow is used, tenant_ids should only contain one single element, while for tenant flow, tenant_ids can contain multiple elements.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :loginPageUri => String.t() | nil,
          :tenantIds => list(String.t()) | nil
        }

  field(:loginPageUri)
  field(:tenantIds, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.IAP.V1.Model.GcipSettings do
  def decode(value, options) do
    GoogleApi.IAP.V1.Model.GcipSettings.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.IAP.V1.Model.GcipSettings do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
