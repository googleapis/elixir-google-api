# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Logging.V2.Model.Settings do
  @moduledoc """
  Describes the settings associated with a project, folder, organization, billing account, or flexible resource.

  ## Attributes

  *   `disableDefaultSink` (*type:* `boolean()`, *default:* `nil`) - Optional. If set to true, the _Default sink in newly created projects and folders will created in a disabled state. This can be used to automatically disable log ingestion if there is already an aggregated sink configured in the hierarchy. The _Default sink can be re-enabled manually if needed.
  *   `name` (*type:* `String.t`, *default:* `nil`) - Output only. The resource name of the settings.
  *   `storageLocation` (*type:* `String.t`, *default:* `nil`) - Optional. The Cloud region that will be used for _Default and _Required log buckets for newly created projects and folders. For example europe-west1. This setting does not affect the location of custom log buckets.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :disableDefaultSink => boolean() | nil,
          :name => String.t() | nil,
          :storageLocation => String.t() | nil
        }

  field(:disableDefaultSink)
  field(:name)
  field(:storageLocation)
end

defimpl Poison.Decoder, for: GoogleApi.Logging.V2.Model.Settings do
  def decode(value, options) do
    GoogleApi.Logging.V2.Model.Settings.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Logging.V2.Model.Settings do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
