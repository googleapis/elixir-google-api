# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContactCenterInsights.V1.Model.GoogleCloudContactcenterinsightsV1alpha1Dimension do
  @moduledoc """
  A dimension determines the grouping key for the query. In SQL terms, these would be part of both the "SELECT" and "GROUP BY" clauses.

  ## Attributes

  *   `agentDimensionMetadata` (*type:* `GoogleApi.ContactCenterInsights.V1.Model.GoogleCloudContactcenterinsightsV1alpha1DimensionAgentDimensionMetadata.t`, *default:* `nil`) - Output only. Metadata about the agent dimension.
  *   `dimensionKey` (*type:* `String.t`, *default:* `nil`) - The key of the dimension.
  *   `issueDimensionMetadata` (*type:* `GoogleApi.ContactCenterInsights.V1.Model.GoogleCloudContactcenterinsightsV1alpha1DimensionIssueDimensionMetadata.t`, *default:* `nil`) - Output only. Metadata about the issue dimension.
  *   `qaQuestionAnswerDimensionMetadata` (*type:* `GoogleApi.ContactCenterInsights.V1.Model.GoogleCloudContactcenterinsightsV1alpha1DimensionQaQuestionAnswerDimensionMetadata.t`, *default:* `nil`) - Output only. Metadata about the QA question-answer dimension.
  *   `qaQuestionDimensionMetadata` (*type:* `GoogleApi.ContactCenterInsights.V1.Model.GoogleCloudContactcenterinsightsV1alpha1DimensionQaQuestionDimensionMetadata.t`, *default:* `nil`) - Output only. Metadata about the QA question dimension.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :agentDimensionMetadata =>
            GoogleApi.ContactCenterInsights.V1.Model.GoogleCloudContactcenterinsightsV1alpha1DimensionAgentDimensionMetadata.t()
            | nil,
          :dimensionKey => String.t() | nil,
          :issueDimensionMetadata =>
            GoogleApi.ContactCenterInsights.V1.Model.GoogleCloudContactcenterinsightsV1alpha1DimensionIssueDimensionMetadata.t()
            | nil,
          :qaQuestionAnswerDimensionMetadata =>
            GoogleApi.ContactCenterInsights.V1.Model.GoogleCloudContactcenterinsightsV1alpha1DimensionQaQuestionAnswerDimensionMetadata.t()
            | nil,
          :qaQuestionDimensionMetadata =>
            GoogleApi.ContactCenterInsights.V1.Model.GoogleCloudContactcenterinsightsV1alpha1DimensionQaQuestionDimensionMetadata.t()
            | nil
        }

  field(:agentDimensionMetadata,
    as:
      GoogleApi.ContactCenterInsights.V1.Model.GoogleCloudContactcenterinsightsV1alpha1DimensionAgentDimensionMetadata
  )

  field(:dimensionKey)

  field(:issueDimensionMetadata,
    as:
      GoogleApi.ContactCenterInsights.V1.Model.GoogleCloudContactcenterinsightsV1alpha1DimensionIssueDimensionMetadata
  )

  field(:qaQuestionAnswerDimensionMetadata,
    as:
      GoogleApi.ContactCenterInsights.V1.Model.GoogleCloudContactcenterinsightsV1alpha1DimensionQaQuestionAnswerDimensionMetadata
  )

  field(:qaQuestionDimensionMetadata,
    as:
      GoogleApi.ContactCenterInsights.V1.Model.GoogleCloudContactcenterinsightsV1alpha1DimensionQaQuestionDimensionMetadata
  )
end

defimpl Poison.Decoder,
  for: GoogleApi.ContactCenterInsights.V1.Model.GoogleCloudContactcenterinsightsV1alpha1Dimension do
  def decode(value, options) do
    GoogleApi.ContactCenterInsights.V1.Model.GoogleCloudContactcenterinsightsV1alpha1Dimension.decode(
      value,
      options
    )
  end
end

defimpl Poison.Encoder,
  for: GoogleApi.ContactCenterInsights.V1.Model.GoogleCloudContactcenterinsightsV1alpha1Dimension do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
