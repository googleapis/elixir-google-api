# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.DataMigration.V1.Model.EntityDdl do
  @moduledoc """
  A single DDL statement for a specific entity

  ## Attributes

  *   `ddl` (*type:* `String.t`, *default:* `nil`) - The actual ddl code.
  *   `ddlKind` (*type:* `String.t`, *default:* `nil`) - The DDL Kind selected for apply, or UNSPECIFIED if the entity wasn't converted yet.
  *   `ddlType` (*type:* `String.t`, *default:* `nil`) - Type of DDL (Create, Alter).
  *   `editedDdlKind` (*type:* `String.t`, *default:* `nil`) - If ddl_kind is USER_EDIT, this holds the DDL kind of the original content - DETERMINISTIC or AI. Otherwise, this is DDL_KIND_UNSPECIFIED.
  *   `entity` (*type:* `String.t`, *default:* `nil`) - The name of the database entity the ddl refers to.
  *   `entityType` (*type:* `String.t`, *default:* `nil`) - The entity type (if the DDL is for a sub entity).
  *   `issueId` (*type:* `list(String.t)`, *default:* `nil`) - EntityIssues found for this ddl.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :ddl => String.t() | nil,
          :ddlKind => String.t() | nil,
          :ddlType => String.t() | nil,
          :editedDdlKind => String.t() | nil,
          :entity => String.t() | nil,
          :entityType => String.t() | nil,
          :issueId => list(String.t()) | nil
        }

  field(:ddl)
  field(:ddlKind)
  field(:ddlType)
  field(:editedDdlKind)
  field(:entity)
  field(:entityType)
  field(:issueId, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.DataMigration.V1.Model.EntityDdl do
  def decode(value, options) do
    GoogleApi.DataMigration.V1.Model.EntityDdl.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.DataMigration.V1.Model.EntityDdl do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
