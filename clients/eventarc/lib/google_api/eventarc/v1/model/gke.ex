# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Eventarc.V1.Model.GKE do
  @moduledoc """
  Represents a GKE destination.

  ## Attributes

  *   `cluster` (*type:* `String.t`, *default:* `nil`) - Required. The name of the cluster the GKE service is running in. The cluster must be running in the same project as the trigger being created.
  *   `location` (*type:* `String.t`, *default:* `nil`) - Required. The name of the Google Compute Engine in which the cluster resides, which can either be compute zone (for example, us-central1-a) for the zonal clusters or region (for example, us-central1) for regional clusters.
  *   `namespace` (*type:* `String.t`, *default:* `nil`) - Required. The namespace the GKE service is running in.
  *   `path` (*type:* `String.t`, *default:* `nil`) - Optional. The relative path on the GKE service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
  *   `service` (*type:* `String.t`, *default:* `nil`) - Required. Name of the GKE service.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :cluster => String.t() | nil,
          :location => String.t() | nil,
          :namespace => String.t() | nil,
          :path => String.t() | nil,
          :service => String.t() | nil
        }

  field(:cluster)
  field(:location)
  field(:namespace)
  field(:path)
  field(:service)
end

defimpl Poison.Decoder, for: GoogleApi.Eventarc.V1.Model.GKE do
  def decode(value, options) do
    GoogleApi.Eventarc.V1.Model.GKE.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Eventarc.V1.Model.GKE do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
