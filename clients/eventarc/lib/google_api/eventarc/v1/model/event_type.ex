# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Eventarc.V1.Model.EventType do
  @moduledoc """
  A representation of the event type resource.

  ## Attributes

  *   `description` (*type:* `String.t`, *default:* `nil`) - Output only. Human friendly description of what the event type is about. For example "Bucket created in Cloud Storage".
  *   `eventSchemaUri` (*type:* `String.t`, *default:* `nil`) - Output only. URI for the event schema. For example "https://github.com/googleapis/google-cloudevents/blob/master/proto/google/events/cloud/storage/v1/events.proto"
  *   `filteringAttributes` (*type:* `list(GoogleApi.Eventarc.V1.Model.FilteringAttribute.t)`, *default:* `nil`) - Output only. Filtering attributes for the event type.
  *   `type` (*type:* `String.t`, *default:* `nil`) - Output only. The full name of the event type (for example, "google.cloud.storage.object.v1.finalized"). In the form of {provider-id}.{resource}.{version}.{verb}. Types MUST be versioned and event schemas are guaranteed to remain backward compatible within one version. Note that event type versions and API versions do not need to match.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :description => String.t() | nil,
          :eventSchemaUri => String.t() | nil,
          :filteringAttributes => list(GoogleApi.Eventarc.V1.Model.FilteringAttribute.t()) | nil,
          :type => String.t() | nil
        }

  field(:description)
  field(:eventSchemaUri)
  field(:filteringAttributes, as: GoogleApi.Eventarc.V1.Model.FilteringAttribute, type: :list)
  field(:type)
end

defimpl Poison.Decoder, for: GoogleApi.Eventarc.V1.Model.EventType do
  def decode(value, options) do
    GoogleApi.Eventarc.V1.Model.EventType.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Eventarc.V1.Model.EventType do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
