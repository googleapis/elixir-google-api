# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Eventarc.V1.Model.CloudRun do
  @moduledoc """
  Represents a Cloud Run destination.

  ## Attributes

  *   `path` (*type:* `String.t`, *default:* `nil`) - Optional. The relative path on the Cloud Run service the events should be sent to. The value must conform to the definition of URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
  *   `region` (*type:* `String.t`, *default:* `nil`) - Required. The region the Cloud Run service is deployed in.
  *   `service` (*type:* `String.t`, *default:* `nil`) - Required. The name of the Cloud Run service being addressed. See https://cloud.google.com/run/docs/reference/rest/v1/namespaces.services. Only services located in the same project of the trigger object can be addressed.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :path => String.t() | nil,
          :region => String.t() | nil,
          :service => String.t() | nil
        }

  field(:path)
  field(:region)
  field(:service)
end

defimpl Poison.Decoder, for: GoogleApi.Eventarc.V1.Model.CloudRun do
  def decode(value, options) do
    GoogleApi.Eventarc.V1.Model.CloudRun.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Eventarc.V1.Model.CloudRun do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
