# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Pollen.V1.Model.LookupForecastResponse do
  @moduledoc """


  ## Attributes

  *   `dailyInfo` (*type:* `list(GoogleApi.Pollen.V1.Model.DayInfo.t)`, *default:* `nil`) - Required. This object contains the daily forecast information for each day requested.
  *   `nextPageToken` (*type:* `String.t`, *default:* `nil`) - Optional. The token to retrieve the next page.
  *   `regionCode` (*type:* `String.t`, *default:* `nil`) - The ISO_3166-1 alpha-2 code of the country/region corresponding to the location provided in the request. This field might be omitted from the response if the location provided in the request resides in a disputed territory.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :dailyInfo => list(GoogleApi.Pollen.V1.Model.DayInfo.t()) | nil,
          :nextPageToken => String.t() | nil,
          :regionCode => String.t() | nil
        }

  field(:dailyInfo, as: GoogleApi.Pollen.V1.Model.DayInfo, type: :list)
  field(:nextPageToken)
  field(:regionCode)
end

defimpl Poison.Decoder, for: GoogleApi.Pollen.V1.Model.LookupForecastResponse do
  def decode(value, options) do
    GoogleApi.Pollen.V1.Model.LookupForecastResponse.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Pollen.V1.Model.LookupForecastResponse do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
