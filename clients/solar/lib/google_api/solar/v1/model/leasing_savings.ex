# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Solar.V1.Model.LeasingSavings do
  @moduledoc """
  Cost and benefit of leasing a particular configuration of solar panels with a particular electricity usage.

  ## Attributes

  *   `annualLeasingCost` (*type:* `GoogleApi.Solar.V1.Model.Money.t`, *default:* `nil`) - Estimated annual leasing cost.
  *   `leasesAllowed` (*type:* `boolean()`, *default:* `nil`) - Whether leases are allowed in this juristiction (leases are not allowed in some states). If this field is false, then the values in this message should probably be ignored.
  *   `leasesSupported` (*type:* `boolean()`, *default:* `nil`) - Whether leases are supported in this juristiction by the financial calculation engine. If this field is false, then the values in this message should probably be ignored. This is independent of `leases_allowed`: in some areas leases are allowed, but under conditions that aren't handled by the financial models.
  *   `savings` (*type:* `GoogleApi.Solar.V1.Model.SavingsOverTime.t`, *default:* `nil`) - How much is saved (or not) over the lifetime period.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :annualLeasingCost => GoogleApi.Solar.V1.Model.Money.t() | nil,
          :leasesAllowed => boolean() | nil,
          :leasesSupported => boolean() | nil,
          :savings => GoogleApi.Solar.V1.Model.SavingsOverTime.t() | nil
        }

  field(:annualLeasingCost, as: GoogleApi.Solar.V1.Model.Money)
  field(:leasesAllowed)
  field(:leasesSupported)
  field(:savings, as: GoogleApi.Solar.V1.Model.SavingsOverTime)
end

defimpl Poison.Decoder, for: GoogleApi.Solar.V1.Model.LeasingSavings do
  def decode(value, options) do
    GoogleApi.Solar.V1.Model.LeasingSavings.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Solar.V1.Model.LeasingSavings do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
