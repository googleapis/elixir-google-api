# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Spanner.V1.Model.CreateDatabaseRequest do
  @moduledoc """
  The request for CreateDatabase.

  ## Attributes

  *   `createStatement` (*type:* `String.t`, *default:* `nil`) - Required. A `CREATE DATABASE` statement, which specifies the ID of the new database. The database ID must conform to the regular expression `a-z*[a-z0-9]` and be between 2 and 30 characters in length. If the database ID is a reserved word or if it contains a hyphen, the database ID must be enclosed in backticks (`` ` ``).
  *   `databaseDialect` (*type:* `String.t`, *default:* `nil`) - Optional. The dialect of the Cloud Spanner Database.
  *   `encryptionConfig` (*type:* `GoogleApi.Spanner.V1.Model.EncryptionConfig.t`, *default:* `nil`) - Optional. The encryption configuration for the database. If this field is not specified, Cloud Spanner will encrypt/decrypt all data at rest using Google default encryption.
  *   `extraStatements` (*type:* `list(String.t)`, *default:* `nil`) - Optional. A list of DDL statements to run inside the newly created database. Statements can create tables, indexes, etc. These statements execute atomically with the creation of the database: if there is an error in any statement, the database is not created.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :createStatement => String.t() | nil,
          :databaseDialect => String.t() | nil,
          :encryptionConfig => GoogleApi.Spanner.V1.Model.EncryptionConfig.t() | nil,
          :extraStatements => list(String.t()) | nil
        }

  field(:createStatement)
  field(:databaseDialect)
  field(:encryptionConfig, as: GoogleApi.Spanner.V1.Model.EncryptionConfig)
  field(:extraStatements, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.Spanner.V1.Model.CreateDatabaseRequest do
  def decode(value, options) do
    GoogleApi.Spanner.V1.Model.CreateDatabaseRequest.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Spanner.V1.Model.CreateDatabaseRequest do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
