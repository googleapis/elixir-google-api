# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Spanner.V1.Model.InstanceConfig do
  @moduledoc """
  A possible configuration for a Cloud Spanner instance. Configurations define the geographic placement of nodes and their replication.

  ## Attributes

  *   `baseConfig` (*type:* `String.t`, *default:* `nil`) - Base configuration name, e.g. projects//instanceConfigs/nam3, based on which this configuration is created. Only set for user-managed configurations. `base_config` must refer to a configuration of type `GOOGLE_MANAGED` in the same project as this configuration.
  *   `configType` (*type:* `String.t`, *default:* `nil`) - Output only. Whether this instance configuration is a Google-managed or user-managed configuration.
  *   `displayName` (*type:* `String.t`, *default:* `nil`) - The name of this instance configuration as it appears in UIs.
  *   `etag` (*type:* `String.t`, *default:* `nil`) - etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a instance configuration from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform instance configuration updates in order to avoid race conditions: An etag is returned in the response which contains instance configurations, and systems are expected to put that etag in the request to update instance configuration to ensure that their change is applied to the same version of the instance configuration. If no etag is provided in the call to update the instance configuration, then the existing instance configuration is overwritten blindly.
  *   `freeInstanceAvailability` (*type:* `String.t`, *default:* `nil`) - Output only. Describes whether free instances are available to be created in this instance configuration.
  *   `labels` (*type:* `map()`, *default:* `nil`) - Cloud Labels are a flexible and lightweight mechanism for organizing cloud resources into groups that reflect a customer's organizational needs and deployment strategies. Cloud Labels can be used to filter collections of resources. They can be used to control how resource metrics are aggregated. And they can be used as arguments to policy management rules (e.g. route, firewall, load balancing, etc.). * Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `a-z{0,62}`. * Label values must be between 0 and 63 characters long and must conform to the regular expression `[a-z0-9_-]{0,63}`. * No more than 64 labels can be associated with a given resource. See https://goo.gl/xmQnxf for more information on and examples of labels. If you plan to use labels in your own code, please note that additional characters may be allowed in the future. Therefore, you are advised to use an internal label representation, such as JSON, which doesn't rely upon specific characters being disallowed. For example, representing labels as the string: name + "_" + value would prove problematic if we were to allow "_" in a future release.
  *   `leaderOptions` (*type:* `list(String.t)`, *default:* `nil`) - Allowed values of the "default_leader" schema option for databases in instances that use this instance configuration.
  *   `name` (*type:* `String.t`, *default:* `nil`) - A unique identifier for the instance configuration. Values are of the form `projects//instanceConfigs/a-z*`. User instance configuration must start with `custom-`.
  *   `optionalReplicas` (*type:* `list(GoogleApi.Spanner.V1.Model.ReplicaInfo.t)`, *default:* `nil`) - Output only. The available optional replicas to choose from for user-managed configurations. Populated for Google-managed configurations.
  *   `quorumType` (*type:* `String.t`, *default:* `nil`) - Output only. The `QuorumType` of the instance configuration.
  *   `reconciling` (*type:* `boolean()`, *default:* `nil`) - Output only. If true, the instance configuration is being created or updated. If false, there are no ongoing operations for the instance configuration.
  *   `replicas` (*type:* `list(GoogleApi.Spanner.V1.Model.ReplicaInfo.t)`, *default:* `nil`) - The geographic placement of nodes in this instance configuration and their replication properties. To create user-managed configurations, input `replicas` must include all replicas in `replicas` of the `base_config` and include one or more replicas in the `optional_replicas` of the `base_config`.
  *   `state` (*type:* `String.t`, *default:* `nil`) - Output only. The current instance configuration state. Applicable only for `USER_MANAGED` configurations.
  *   `storageLimitPerProcessingUnit` (*type:* `String.t`, *default:* `nil`) - Output only. The storage limit in bytes per processing unit.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :baseConfig => String.t() | nil,
          :configType => String.t() | nil,
          :displayName => String.t() | nil,
          :etag => String.t() | nil,
          :freeInstanceAvailability => String.t() | nil,
          :labels => map() | nil,
          :leaderOptions => list(String.t()) | nil,
          :name => String.t() | nil,
          :optionalReplicas => list(GoogleApi.Spanner.V1.Model.ReplicaInfo.t()) | nil,
          :quorumType => String.t() | nil,
          :reconciling => boolean() | nil,
          :replicas => list(GoogleApi.Spanner.V1.Model.ReplicaInfo.t()) | nil,
          :state => String.t() | nil,
          :storageLimitPerProcessingUnit => String.t() | nil
        }

  field(:baseConfig)
  field(:configType)
  field(:displayName)
  field(:etag)
  field(:freeInstanceAvailability)
  field(:labels, type: :map)
  field(:leaderOptions, type: :list)
  field(:name)
  field(:optionalReplicas, as: GoogleApi.Spanner.V1.Model.ReplicaInfo, type: :list)
  field(:quorumType)
  field(:reconciling)
  field(:replicas, as: GoogleApi.Spanner.V1.Model.ReplicaInfo, type: :list)
  field(:state)
  field(:storageLimitPerProcessingUnit)
end

defimpl Poison.Decoder, for: GoogleApi.Spanner.V1.Model.InstanceConfig do
  def decode(value, options) do
    GoogleApi.Spanner.V1.Model.InstanceConfig.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Spanner.V1.Model.InstanceConfig do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
