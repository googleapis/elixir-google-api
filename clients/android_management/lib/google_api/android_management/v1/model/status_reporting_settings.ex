# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.AndroidManagement.V1.Model.StatusReportingSettings do
  @moduledoc """
  Settings controlling the behavior of status reports.

  ## Attributes

  *   `applicationReportingSettings` (*type:* `GoogleApi.AndroidManagement.V1.Model.ApplicationReportingSettings.t`, *default:* `nil`) - Application reporting settings. Only applicable if application_reports_enabled is true.
  *   `applicationReportsEnabled` (*type:* `boolean()`, *default:* `nil`) - Whether app reports are enabled.
  *   `commonCriteriaModeEnabled` (*type:* `boolean()`, *default:* `nil`) - Whether Common Criteria Mode reporting is enabled. This is supported only on company-owned devices.
  *   `deviceSettingsEnabled` (*type:* `boolean()`, *default:* `nil`) - Whether device settings reporting is enabled.
  *   `displayInfoEnabled` (*type:* `boolean()`, *default:* `nil`) - Whether displays reporting is enabled. Report data is not available for personally owned devices with work profiles.
  *   `hardwareStatusEnabled` (*type:* `boolean()`, *default:* `nil`) - Whether hardware status reporting is enabled. Report data is not available for personally owned devices with work profiles.
  *   `memoryInfoEnabled` (*type:* `boolean()`, *default:* `nil`) - Whether memory event reporting is enabled.
  *   `networkInfoEnabled` (*type:* `boolean()`, *default:* `nil`) - Whether network info reporting is enabled.
  *   `powerManagementEventsEnabled` (*type:* `boolean()`, *default:* `nil`) - Whether power management event reporting is enabled. Report data is not available for personally owned devices with work profiles.
  *   `softwareInfoEnabled` (*type:* `boolean()`, *default:* `nil`) - Whether software info reporting is enabled.
  *   `systemPropertiesEnabled` (*type:* `boolean()`, *default:* `nil`) - Whether system properties reporting is enabled.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :applicationReportingSettings =>
            GoogleApi.AndroidManagement.V1.Model.ApplicationReportingSettings.t() | nil,
          :applicationReportsEnabled => boolean() | nil,
          :commonCriteriaModeEnabled => boolean() | nil,
          :deviceSettingsEnabled => boolean() | nil,
          :displayInfoEnabled => boolean() | nil,
          :hardwareStatusEnabled => boolean() | nil,
          :memoryInfoEnabled => boolean() | nil,
          :networkInfoEnabled => boolean() | nil,
          :powerManagementEventsEnabled => boolean() | nil,
          :softwareInfoEnabled => boolean() | nil,
          :systemPropertiesEnabled => boolean() | nil
        }

  field(:applicationReportingSettings,
    as: GoogleApi.AndroidManagement.V1.Model.ApplicationReportingSettings
  )

  field(:applicationReportsEnabled)
  field(:commonCriteriaModeEnabled)
  field(:deviceSettingsEnabled)
  field(:displayInfoEnabled)
  field(:hardwareStatusEnabled)
  field(:memoryInfoEnabled)
  field(:networkInfoEnabled)
  field(:powerManagementEventsEnabled)
  field(:softwareInfoEnabled)
  field(:systemPropertiesEnabled)
end

defimpl Poison.Decoder, for: GoogleApi.AndroidManagement.V1.Model.StatusReportingSettings do
  def decode(value, options) do
    GoogleApi.AndroidManagement.V1.Model.StatusReportingSettings.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.AndroidManagement.V1.Model.StatusReportingSettings do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
