# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Composer.V1beta1.Model.WorkloadsConfig do
  @moduledoc """
  The Kubernetes workloads configuration for GKE cluster associated with the Cloud Composer environment. Supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.

  ## Attributes

  *   `dagProcessor` (*type:* `GoogleApi.Composer.V1beta1.Model.DagProcessorResource.t`, *default:* `nil`) - Optional. Resources used by Airflow DAG processors. This field is supported for Cloud Composer environments in versions composer-3-airflow-*.*.*-build.* and newer.
  *   `scheduler` (*type:* `GoogleApi.Composer.V1beta1.Model.SchedulerResource.t`, *default:* `nil`) - Optional. Resources used by Airflow schedulers.
  *   `triggerer` (*type:* `GoogleApi.Composer.V1beta1.Model.TriggererResource.t`, *default:* `nil`) - Optional. Resources used by Airflow triggerers.
  *   `webServer` (*type:* `GoogleApi.Composer.V1beta1.Model.WebServerResource.t`, *default:* `nil`) - Optional. Resources used by Airflow web server.
  *   `worker` (*type:* `GoogleApi.Composer.V1beta1.Model.WorkerResource.t`, *default:* `nil`) - Optional. Resources used by Airflow workers.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :dagProcessor => GoogleApi.Composer.V1beta1.Model.DagProcessorResource.t() | nil,
          :scheduler => GoogleApi.Composer.V1beta1.Model.SchedulerResource.t() | nil,
          :triggerer => GoogleApi.Composer.V1beta1.Model.TriggererResource.t() | nil,
          :webServer => GoogleApi.Composer.V1beta1.Model.WebServerResource.t() | nil,
          :worker => GoogleApi.Composer.V1beta1.Model.WorkerResource.t() | nil
        }

  field(:dagProcessor, as: GoogleApi.Composer.V1beta1.Model.DagProcessorResource)
  field(:scheduler, as: GoogleApi.Composer.V1beta1.Model.SchedulerResource)
  field(:triggerer, as: GoogleApi.Composer.V1beta1.Model.TriggererResource)
  field(:webServer, as: GoogleApi.Composer.V1beta1.Model.WebServerResource)
  field(:worker, as: GoogleApi.Composer.V1beta1.Model.WorkerResource)
end

defimpl Poison.Decoder, for: GoogleApi.Composer.V1beta1.Model.WorkloadsConfig do
  def decode(value, options) do
    GoogleApi.Composer.V1beta1.Model.WorkloadsConfig.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Composer.V1beta1.Model.WorkloadsConfig do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
