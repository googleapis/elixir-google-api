# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.FirebaseDatabase.V1beta.Model.DatabaseInstance do
  @moduledoc """
  Representation of a Realtime Database instance. Details on interacting with contents of a DatabaseInstance can be found at: https://firebase.google.com/docs/database/rest/start.

  ## Attributes

  *   `databaseUrl` (*type:* `String.t`, *default:* `nil`) - Immutable. The globally unique hostname of the database.
  *   `name` (*type:* `String.t`, *default:* `nil`) - The fully qualified resource name of the database instance, in the form: `projects/{project-number}/locations/{location-id}/instances/{database-id}`.
  *   `project` (*type:* `String.t`, *default:* `nil`) - The resource name of the project this instance belongs to. For example: `projects/{project-number}`.
  *   `state` (*type:* `String.t`, *default:* `nil`) - The database's lifecycle state. Read-only.
  *   `type` (*type:* `String.t`, *default:* `nil`) - The database instance type. On creation only USER_DATABASE is allowed, which is also the default when omitted.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :databaseUrl => String.t() | nil,
          :name => String.t() | nil,
          :project => String.t() | nil,
          :state => String.t() | nil,
          :type => String.t() | nil
        }

  field(:databaseUrl)
  field(:name)
  field(:project)
  field(:state)
  field(:type)
end

defimpl Poison.Decoder, for: GoogleApi.FirebaseDatabase.V1beta.Model.DatabaseInstance do
  def decode(value, options) do
    GoogleApi.FirebaseDatabase.V1beta.Model.DatabaseInstance.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.FirebaseDatabase.V1beta.Model.DatabaseInstance do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
