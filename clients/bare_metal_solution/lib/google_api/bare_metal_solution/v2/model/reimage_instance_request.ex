# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.BareMetalSolution.V2.Model.ReimageInstanceRequest do
  @moduledoc """
  Message requesting to perform reimage operation on a server.

  ## Attributes

  *   `kmsKeyVersion` (*type:* `String.t`, *default:* `nil`) - Optional. Name of the KMS crypto key version used to encrypt the initial passwords. The key has to have ASYMMETRIC_DECRYPT purpose. Format is `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}/cryptoKeyVersions/{version}`.
  *   `osImage` (*type:* `String.t`, *default:* `nil`) - Required. The OS image code of the image which will be used in the reimage operation.
  *   `sshKeys` (*type:* `list(String.t)`, *default:* `nil`) - Optional. List of SSH Keys used during reimaging an instance.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :kmsKeyVersion => String.t() | nil,
          :osImage => String.t() | nil,
          :sshKeys => list(String.t()) | nil
        }

  field(:kmsKeyVersion)
  field(:osImage)
  field(:sshKeys, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.BareMetalSolution.V2.Model.ReimageInstanceRequest do
  def decode(value, options) do
    GoogleApi.BareMetalSolution.V2.Model.ReimageInstanceRequest.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.BareMetalSolution.V2.Model.ReimageInstanceRequest do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
