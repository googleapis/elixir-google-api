# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.AnalyticsData.V1beta.Model.DimensionExpression do
  @moduledoc """
  Used to express a dimension which is the result of a formula of multiple dimensions. Example usages: 1) lower_case(dimension) 2) concatenate(dimension1, symbol, dimension2).

  ## Attributes

  *   `concatenate` (*type:* `GoogleApi.AnalyticsData.V1beta.Model.ConcatenateExpression.t`, *default:* `nil`) - Used to combine dimension values to a single dimension. For example, dimension "country, city": concatenate(country, ", ", city).
  *   `lowerCase` (*type:* `GoogleApi.AnalyticsData.V1beta.Model.CaseExpression.t`, *default:* `nil`) - Used to convert a dimension value to lower case.
  *   `upperCase` (*type:* `GoogleApi.AnalyticsData.V1beta.Model.CaseExpression.t`, *default:* `nil`) - Used to convert a dimension value to upper case.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :concatenate => GoogleApi.AnalyticsData.V1beta.Model.ConcatenateExpression.t() | nil,
          :lowerCase => GoogleApi.AnalyticsData.V1beta.Model.CaseExpression.t() | nil,
          :upperCase => GoogleApi.AnalyticsData.V1beta.Model.CaseExpression.t() | nil
        }

  field(:concatenate, as: GoogleApi.AnalyticsData.V1beta.Model.ConcatenateExpression)
  field(:lowerCase, as: GoogleApi.AnalyticsData.V1beta.Model.CaseExpression)
  field(:upperCase, as: GoogleApi.AnalyticsData.V1beta.Model.CaseExpression)
end

defimpl Poison.Decoder, for: GoogleApi.AnalyticsData.V1beta.Model.DimensionExpression do
  def decode(value, options) do
    GoogleApi.AnalyticsData.V1beta.Model.DimensionExpression.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.AnalyticsData.V1beta.Model.DimensionExpression do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
