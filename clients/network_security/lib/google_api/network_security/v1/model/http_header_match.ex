# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.NetworkSecurity.V1.Model.HttpHeaderMatch do
  @moduledoc """
  Specification of HTTP header match atrributes.

  ## Attributes

  *   `headerName` (*type:* `String.t`, *default:* `nil`) - Required. The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use the headerName ":method".
  *   `regexMatch` (*type:* `String.t`, *default:* `nil`) - Required. The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header's port specifier.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :headerName => String.t() | nil,
          :regexMatch => String.t() | nil
        }

  field(:headerName)
  field(:regexMatch)
end

defimpl Poison.Decoder, for: GoogleApi.NetworkSecurity.V1.Model.HttpHeaderMatch do
  def decode(value, options) do
    GoogleApi.NetworkSecurity.V1.Model.HttpHeaderMatch.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.NetworkSecurity.V1.Model.HttpHeaderMatch do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
