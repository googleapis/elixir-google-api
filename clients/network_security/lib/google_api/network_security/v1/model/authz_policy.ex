# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.NetworkSecurity.V1.Model.AuthzPolicy do
  @moduledoc """
  `AuthzPolicy` is a resource that allows to forward traffic to a callout backend designed to scan the traffic for security purposes.

  ## Attributes

  *   `action` (*type:* `String.t`, *default:* `nil`) - Required. Can be one of `ALLOW`, `DENY`, `CUSTOM`. When the action is `CUSTOM`, `customProvider` must be specified. When the action is `ALLOW`, only requests matching the policy will be allowed. When the action is `DENY`, only requests matching the policy will be denied. When a request arrives, the policies are evaluated in the following order: 1. If there is a `CUSTOM` policy that matches the request, the `CUSTOM` policy is evaluated using the custom authorization providers and the request is denied if the provider rejects the request. 2. If there are any `DENY` policies that match the request, the request is denied. 3. If there are no `ALLOW` policies for the resource or if any of the `ALLOW` policies match the request, the request is allowed. 4. Else the request is denied by default if none of the configured AuthzPolicies with `ALLOW` action match the request.
  *   `createTime` (*type:* `DateTime.t`, *default:* `nil`) - Output only. The timestamp when the resource was created.
  *   `customProvider` (*type:* `GoogleApi.NetworkSecurity.V1.Model.AuthzPolicyCustomProvider.t`, *default:* `nil`) - Optional. Required if the action is `CUSTOM`. Allows delegating authorization decisions to Cloud IAP or to Service Extensions. One of `cloudIap` or `authzExtension` must be specified.
  *   `description` (*type:* `String.t`, *default:* `nil`) - Optional. A human-readable description of the resource.
  *   `httpRules` (*type:* `list(GoogleApi.NetworkSecurity.V1.Model.AuthzPolicyAuthzRule.t)`, *default:* `nil`) - Optional. A list of authorization HTTP rules to match against the incoming request. A policy match occurs when at least one HTTP rule matches the request or when no HTTP rules are specified in the policy. At least one HTTP Rule is required for Allow or Deny Action. Limited to 5 rules.
  *   `labels` (*type:* `map()`, *default:* `nil`) - Optional. Set of labels associated with the `AuthzPolicy` resource. The format must comply with [the following requirements](/compute/docs/labeling-resources#requirements).
  *   `name` (*type:* `String.t`, *default:* `nil`) - Required. Identifier. Name of the `AuthzPolicy` resource in the following format: `projects/{project}/locations/{location}/authzPolicies/{authz_policy}`.
  *   `target` (*type:* `GoogleApi.NetworkSecurity.V1.Model.AuthzPolicyTarget.t`, *default:* `nil`) - Required. Specifies the set of resources to which this policy should be applied to.
  *   `updateTime` (*type:* `DateTime.t`, *default:* `nil`) - Output only. The timestamp when the resource was updated.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :action => String.t() | nil,
          :createTime => DateTime.t() | nil,
          :customProvider =>
            GoogleApi.NetworkSecurity.V1.Model.AuthzPolicyCustomProvider.t() | nil,
          :description => String.t() | nil,
          :httpRules => list(GoogleApi.NetworkSecurity.V1.Model.AuthzPolicyAuthzRule.t()) | nil,
          :labels => map() | nil,
          :name => String.t() | nil,
          :target => GoogleApi.NetworkSecurity.V1.Model.AuthzPolicyTarget.t() | nil,
          :updateTime => DateTime.t() | nil
        }

  field(:action)
  field(:createTime, as: DateTime)
  field(:customProvider, as: GoogleApi.NetworkSecurity.V1.Model.AuthzPolicyCustomProvider)
  field(:description)
  field(:httpRules, as: GoogleApi.NetworkSecurity.V1.Model.AuthzPolicyAuthzRule, type: :list)
  field(:labels, type: :map)
  field(:name)
  field(:target, as: GoogleApi.NetworkSecurity.V1.Model.AuthzPolicyTarget)
  field(:updateTime, as: DateTime)
end

defimpl Poison.Decoder, for: GoogleApi.NetworkSecurity.V1.Model.AuthzPolicy do
  def decode(value, options) do
    GoogleApi.NetworkSecurity.V1.Model.AuthzPolicy.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.NetworkSecurity.V1.Model.AuthzPolicy do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
