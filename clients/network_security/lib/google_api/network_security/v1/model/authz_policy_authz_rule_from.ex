# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.NetworkSecurity.V1.Model.AuthzPolicyAuthzRuleFrom do
  @moduledoc """
  Describes properties of one or more sources of a request.

  ## Attributes

  *   `notSources` (*type:* `list(GoogleApi.NetworkSecurity.V1.Model.AuthzPolicyAuthzRuleFromRequestSource.t)`, *default:* `nil`) - Optional. Describes the negated properties of request sources. Matches requests from sources that do not match the criteria specified in this field. At least one of sources or notSources must be specified.
  *   `sources` (*type:* `list(GoogleApi.NetworkSecurity.V1.Model.AuthzPolicyAuthzRuleFromRequestSource.t)`, *default:* `nil`) - Optional. Describes the properties of a request's sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :notSources =>
            list(GoogleApi.NetworkSecurity.V1.Model.AuthzPolicyAuthzRuleFromRequestSource.t())
            | nil,
          :sources =>
            list(GoogleApi.NetworkSecurity.V1.Model.AuthzPolicyAuthzRuleFromRequestSource.t())
            | nil
        }

  field(:notSources,
    as: GoogleApi.NetworkSecurity.V1.Model.AuthzPolicyAuthzRuleFromRequestSource,
    type: :list
  )

  field(:sources,
    as: GoogleApi.NetworkSecurity.V1.Model.AuthzPolicyAuthzRuleFromRequestSource,
    type: :list
  )
end

defimpl Poison.Decoder, for: GoogleApi.NetworkSecurity.V1.Model.AuthzPolicyAuthzRuleFrom do
  def decode(value, options) do
    GoogleApi.NetworkSecurity.V1.Model.AuthzPolicyAuthzRuleFrom.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.NetworkSecurity.V1.Model.AuthzPolicyAuthzRuleFrom do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
