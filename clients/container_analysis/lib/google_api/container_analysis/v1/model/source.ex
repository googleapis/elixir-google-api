# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContainerAnalysis.V1.Model.Source do
  @moduledoc """
  Source describes the location of the source used for the build.

  ## Attributes

  *   `additionalContexts` (*type:* `list(GoogleApi.ContainerAnalysis.V1.Model.SourceContext.t)`, *default:* `nil`) - If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
  *   `artifactStorageSourceUri` (*type:* `String.t`, *default:* `nil`) - If provided, the input binary artifacts for the build came from this location.
  *   `context` (*type:* `GoogleApi.ContainerAnalysis.V1.Model.SourceContext.t`, *default:* `nil`) - If provided, the source code used for the build came from this location.
  *   `fileHashes` (*type:* `%{optional(String.t) => GoogleApi.ContainerAnalysis.V1.Model.FileHashes.t}`, *default:* `nil`) - Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :additionalContexts =>
            list(GoogleApi.ContainerAnalysis.V1.Model.SourceContext.t()) | nil,
          :artifactStorageSourceUri => String.t() | nil,
          :context => GoogleApi.ContainerAnalysis.V1.Model.SourceContext.t() | nil,
          :fileHashes =>
            %{optional(String.t()) => GoogleApi.ContainerAnalysis.V1.Model.FileHashes.t()} | nil
        }

  field(:additionalContexts, as: GoogleApi.ContainerAnalysis.V1.Model.SourceContext, type: :list)
  field(:artifactStorageSourceUri)
  field(:context, as: GoogleApi.ContainerAnalysis.V1.Model.SourceContext)
  field(:fileHashes, as: GoogleApi.ContainerAnalysis.V1.Model.FileHashes, type: :map)
end

defimpl Poison.Decoder, for: GoogleApi.ContainerAnalysis.V1.Model.Source do
  def decode(value, options) do
    GoogleApi.ContainerAnalysis.V1.Model.Source.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContainerAnalysis.V1.Model.Source do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
