# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContainerAnalysis.V1.Model.DiscoveryOccurrence do
  @moduledoc """
  Provides information about the analysis status of a discovered resource.

  ## Attributes

  *   `analysisStatus` (*type:* `String.t`, *default:* `nil`) - The status of discovery for the resource.
  *   `analysisStatusError` (*type:* `GoogleApi.ContainerAnalysis.V1.Model.Status.t`, *default:* `nil`) - When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
  *   `archiveTime` (*type:* `DateTime.t`, *default:* `nil`) - Output only. The time occurrences related to this discovery occurrence were archived.
  *   `continuousAnalysis` (*type:* `String.t`, *default:* `nil`) - Whether the resource is continuously analyzed.
  *   `cpe` (*type:* `String.t`, *default:* `nil`) - The CPE of the resource being scanned.
  *   `lastScanTime` (*type:* `DateTime.t`, *default:* `nil`) - The last time this resource was scanned.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :analysisStatus => String.t() | nil,
          :analysisStatusError => GoogleApi.ContainerAnalysis.V1.Model.Status.t() | nil,
          :archiveTime => DateTime.t() | nil,
          :continuousAnalysis => String.t() | nil,
          :cpe => String.t() | nil,
          :lastScanTime => DateTime.t() | nil
        }

  field(:analysisStatus)
  field(:analysisStatusError, as: GoogleApi.ContainerAnalysis.V1.Model.Status)
  field(:archiveTime, as: DateTime)
  field(:continuousAnalysis)
  field(:cpe)
  field(:lastScanTime, as: DateTime)
end

defimpl Poison.Decoder, for: GoogleApi.ContainerAnalysis.V1.Model.DiscoveryOccurrence do
  def decode(value, options) do
    GoogleApi.ContainerAnalysis.V1.Model.DiscoveryOccurrence.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContainerAnalysis.V1.Model.DiscoveryOccurrence do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
