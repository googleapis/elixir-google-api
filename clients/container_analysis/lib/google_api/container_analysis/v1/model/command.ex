# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.ContainerAnalysis.V1.Model.Command do
  @moduledoc """
  Command describes a step performed as part of the build pipeline.

  ## Attributes

  *   `args` (*type:* `list(String.t)`, *default:* `nil`) - Command-line arguments used when executing this command.
  *   `dir` (*type:* `String.t`, *default:* `nil`) - Working directory (relative to project source root) used when running this command.
  *   `env` (*type:* `list(String.t)`, *default:* `nil`) - Environment variables set before running this command.
  *   `id` (*type:* `String.t`, *default:* `nil`) - Optional unique identifier for this command, used in wait_for to reference this command as a dependency.
  *   `name` (*type:* `String.t`, *default:* `nil`) - Required. Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
  *   `waitFor` (*type:* `list(String.t)`, *default:* `nil`) - The ID(s) of the command(s) that this command depends on.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :args => list(String.t()) | nil,
          :dir => String.t() | nil,
          :env => list(String.t()) | nil,
          :id => String.t() | nil,
          :name => String.t() | nil,
          :waitFor => list(String.t()) | nil
        }

  field(:args, type: :list)
  field(:dir)
  field(:env, type: :list)
  field(:id)
  field(:name)
  field(:waitFor, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.ContainerAnalysis.V1.Model.Command do
  def decode(value, options) do
    GoogleApi.ContainerAnalysis.V1.Model.Command.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.ContainerAnalysis.V1.Model.Command do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
