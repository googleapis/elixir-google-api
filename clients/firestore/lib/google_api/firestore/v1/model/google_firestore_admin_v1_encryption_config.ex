# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Firestore.V1.Model.GoogleFirestoreAdminV1EncryptionConfig do
  @moduledoc """
  Encryption configuration for a new database being created from another source. The source could be a Backup .

  ## Attributes

  *   `customerManagedEncryption` (*type:* `GoogleApi.Firestore.V1.Model.GoogleFirestoreAdminV1CustomerManagedEncryptionOptions.t`, *default:* `nil`) - Use Customer Managed Encryption Keys (CMEK) for encryption.
  *   `googleDefaultEncryption` (*type:* `GoogleApi.Firestore.V1.Model.GoogleFirestoreAdminV1GoogleDefaultEncryptionOptions.t`, *default:* `nil`) - Use Google default encryption.
  *   `useSourceEncryption` (*type:* `GoogleApi.Firestore.V1.Model.GoogleFirestoreAdminV1SourceEncryptionOptions.t`, *default:* `nil`) - The database will use the same encryption configuration as the source.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :customerManagedEncryption =>
            GoogleApi.Firestore.V1.Model.GoogleFirestoreAdminV1CustomerManagedEncryptionOptions.t()
            | nil,
          :googleDefaultEncryption =>
            GoogleApi.Firestore.V1.Model.GoogleFirestoreAdminV1GoogleDefaultEncryptionOptions.t()
            | nil,
          :useSourceEncryption =>
            GoogleApi.Firestore.V1.Model.GoogleFirestoreAdminV1SourceEncryptionOptions.t() | nil
        }

  field(:customerManagedEncryption,
    as: GoogleApi.Firestore.V1.Model.GoogleFirestoreAdminV1CustomerManagedEncryptionOptions
  )

  field(:googleDefaultEncryption,
    as: GoogleApi.Firestore.V1.Model.GoogleFirestoreAdminV1GoogleDefaultEncryptionOptions
  )

  field(:useSourceEncryption,
    as: GoogleApi.Firestore.V1.Model.GoogleFirestoreAdminV1SourceEncryptionOptions
  )
end

defimpl Poison.Decoder, for: GoogleApi.Firestore.V1.Model.GoogleFirestoreAdminV1EncryptionConfig do
  def decode(value, options) do
    GoogleApi.Firestore.V1.Model.GoogleFirestoreAdminV1EncryptionConfig.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Firestore.V1.Model.GoogleFirestoreAdminV1EncryptionConfig do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
