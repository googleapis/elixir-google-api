# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.PubSub.V1.Model.AzureEventHubs do
  @moduledoc """
  Ingestion settings for Azure Event Hubs.

  ## Attributes

  *   `clientId` (*type:* `String.t`, *default:* `nil`) - Optional. The client id of the Azure application that is being used to authenticate Pub/Sub.
  *   `eventHub` (*type:* `String.t`, *default:* `nil`) - Optional. The name of the Event Hub.
  *   `gcpServiceAccount` (*type:* `String.t`, *default:* `nil`) - Optional. The GCP service account to be used for Federated Identity authentication.
  *   `namespace` (*type:* `String.t`, *default:* `nil`) - Optional. The name of the Event Hubs namespace.
  *   `resourceGroup` (*type:* `String.t`, *default:* `nil`) - Optional. Name of the resource group within the azure subscription.
  *   `state` (*type:* `String.t`, *default:* `nil`) - Output only. An output-only field that indicates the state of the Event Hubs ingestion source.
  *   `subscriptionId` (*type:* `String.t`, *default:* `nil`) - Optional. The Azure subscription id.
  *   `tenantId` (*type:* `String.t`, *default:* `nil`) - Optional. The tenant id of the Azure application that is being used to authenticate Pub/Sub.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :clientId => String.t() | nil,
          :eventHub => String.t() | nil,
          :gcpServiceAccount => String.t() | nil,
          :namespace => String.t() | nil,
          :resourceGroup => String.t() | nil,
          :state => String.t() | nil,
          :subscriptionId => String.t() | nil,
          :tenantId => String.t() | nil
        }

  field(:clientId)
  field(:eventHub)
  field(:gcpServiceAccount)
  field(:namespace)
  field(:resourceGroup)
  field(:state)
  field(:subscriptionId)
  field(:tenantId)
end

defimpl Poison.Decoder, for: GoogleApi.PubSub.V1.Model.AzureEventHubs do
  def decode(value, options) do
    GoogleApi.PubSub.V1.Model.AzureEventHubs.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.PubSub.V1.Model.AzureEventHubs do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
