# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.PubSub.V1.Model.ConfluentCloud do
  @moduledoc """
  Ingestion settings for Confluent Cloud.

  ## Attributes

  *   `bootstrapServer` (*type:* `String.t`, *default:* `nil`) - Required. The address of the bootstrap server. The format is url:port.
  *   `clusterId` (*type:* `String.t`, *default:* `nil`) - Required. The id of the cluster.
  *   `gcpServiceAccount` (*type:* `String.t`, *default:* `nil`) - Required. The GCP service account to be used for Federated Identity authentication with `identity_pool_id`.
  *   `identityPoolId` (*type:* `String.t`, *default:* `nil`) - Required. The id of the identity pool to be used for Federated Identity authentication with Confluent Cloud. See https://docs.confluent.io/cloud/current/security/authenticate/workload-identities/identity-providers/oauth/identity-pools.html#add-oauth-identity-pools.
  *   `state` (*type:* `String.t`, *default:* `nil`) - Output only. An output-only field that indicates the state of the Confluent Cloud ingestion source.
  *   `topic` (*type:* `String.t`, *default:* `nil`) - Required. The name of the topic in the Confluent Cloud cluster that Pub/Sub will import from.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :bootstrapServer => String.t() | nil,
          :clusterId => String.t() | nil,
          :gcpServiceAccount => String.t() | nil,
          :identityPoolId => String.t() | nil,
          :state => String.t() | nil,
          :topic => String.t() | nil
        }

  field(:bootstrapServer)
  field(:clusterId)
  field(:gcpServiceAccount)
  field(:identityPoolId)
  field(:state)
  field(:topic)
end

defimpl Poison.Decoder, for: GoogleApi.PubSub.V1.Model.ConfluentCloud do
  def decode(value, options) do
    GoogleApi.PubSub.V1.Model.ConfluentCloud.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.PubSub.V1.Model.ConfluentCloud do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
