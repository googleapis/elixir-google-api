# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.IAM.V1.Model.InlineTrustConfig do
  @moduledoc """
  Defines configuration for extending trust to additional trust domains. By establishing trust with another domain, the current domain will recognize and accept certificates issued by entities within the trusted domains. Note that a trust domain automatically trusts itself, eliminating the need for explicit configuration.

  ## Attributes

  *   `additionalTrustBundles` (*type:* `%{optional(String.t) => GoogleApi.IAM.V1.Model.TrustStore.t}`, *default:* `nil`) - Optional. Maps specific trust domains (e.g., "example.com") to their corresponding TrustStore objects, which contain the trusted root certificates for that domain. There can be a maximum of 10 trust domain entries in this map. Note that a trust domain automatically trusts itself and don't need to be specified here. If however, this WorkloadIdentityPool's trust domain contains any trust anchors in the additional_trust_bundles map, those trust anchors will be *appended to* the Trust Bundle automatically derived from your InlineCertificateIssuanceConfig's ca_pools.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :additionalTrustBundles =>
            %{optional(String.t()) => GoogleApi.IAM.V1.Model.TrustStore.t()} | nil
        }

  field(:additionalTrustBundles, as: GoogleApi.IAM.V1.Model.TrustStore, type: :map)
end

defimpl Poison.Decoder, for: GoogleApi.IAM.V1.Model.InlineTrustConfig do
  def decode(value, options) do
    GoogleApi.IAM.V1.Model.InlineTrustConfig.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.IAM.V1.Model.InlineTrustConfig do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
