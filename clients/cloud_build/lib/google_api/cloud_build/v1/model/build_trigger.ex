# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudBuild.V1.Model.BuildTrigger do
  @moduledoc """
  Configuration for an automated build in response to source repository changes.

  ## Attributes

  *   `approvalConfig` (*type:* `GoogleApi.CloudBuild.V1.Model.ApprovalConfig.t`, *default:* `nil`) - Configuration for manual approval to start a build invocation of this BuildTrigger.
  *   `autodetect` (*type:* `boolean()`, *default:* `nil`) - Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers.
  *   `build` (*type:* `GoogleApi.CloudBuild.V1.Model.Build.t`, *default:* `nil`) - Contents of the build template.
  *   `createTime` (*type:* `DateTime.t`, *default:* `nil`) - Output only. Time when the trigger was created.
  *   `description` (*type:* `String.t`, *default:* `nil`) - Human-readable description of this trigger.
  *   `disabled` (*type:* `boolean()`, *default:* `nil`) - If true, the trigger will never automatically execute a build.
  *   `filename` (*type:* `String.t`, *default:* `nil`) - Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml).
  *   `filter` (*type:* `String.t`, *default:* `nil`) - A Common Expression Language string.
  *   `gitFileSource` (*type:* `GoogleApi.CloudBuild.V1.Model.GitFileSource.t`, *default:* `nil`) - The file source describing the local or remote Build template.
  *   `github` (*type:* `GoogleApi.CloudBuild.V1.Model.GitHubEventsConfig.t`, *default:* `nil`) - GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. Mutually exclusive with `trigger_template`.
  *   `id` (*type:* `String.t`, *default:* `nil`) - Output only. Unique identifier of the trigger.
  *   `ignoredFiles` (*type:* `list(String.t)`, *default:* `nil`) - ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for "**". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build.
  *   `includedFiles` (*type:* `list(String.t)`, *default:* `nil`) - If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build.
  *   `name` (*type:* `String.t`, *default:* `nil`) - User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.
  *   `pubsubConfig` (*type:* `GoogleApi.CloudBuild.V1.Model.PubsubConfig.t`, *default:* `nil`) - PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.
  *   `resourceName` (*type:* `String.t`, *default:* `nil`) - The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service.
  *   `serviceAccount` (*type:* `String.t`, *default:* `nil`) - The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set, then the standard Cloud Build service account ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format: `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}`
  *   `sourceToBuild` (*type:* `GoogleApi.CloudBuild.V1.Model.GitRepoSource.t`, *default:* `nil`) - The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers.
  *   `substitutions` (*type:* `map()`, *default:* `nil`) - Substitutions for Build resource. The keys must match the following regular expression: `^_[A-Z0-9_]+$`.
  *   `tags` (*type:* `list(String.t)`, *default:* `nil`) - Tags for annotation of a `BuildTrigger`
  *   `triggerTemplate` (*type:* `GoogleApi.CloudBuild.V1.Model.RepoSource.t`, *default:* `nil`) - Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build. Mutually exclusive with `github`.
  *   `webhookConfig` (*type:* `GoogleApi.CloudBuild.V1.Model.WebhookConfig.t`, *default:* `nil`) - WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :approvalConfig => GoogleApi.CloudBuild.V1.Model.ApprovalConfig.t() | nil,
          :autodetect => boolean() | nil,
          :build => GoogleApi.CloudBuild.V1.Model.Build.t() | nil,
          :createTime => DateTime.t() | nil,
          :description => String.t() | nil,
          :disabled => boolean() | nil,
          :filename => String.t() | nil,
          :filter => String.t() | nil,
          :gitFileSource => GoogleApi.CloudBuild.V1.Model.GitFileSource.t() | nil,
          :github => GoogleApi.CloudBuild.V1.Model.GitHubEventsConfig.t() | nil,
          :id => String.t() | nil,
          :ignoredFiles => list(String.t()) | nil,
          :includedFiles => list(String.t()) | nil,
          :name => String.t() | nil,
          :pubsubConfig => GoogleApi.CloudBuild.V1.Model.PubsubConfig.t() | nil,
          :resourceName => String.t() | nil,
          :serviceAccount => String.t() | nil,
          :sourceToBuild => GoogleApi.CloudBuild.V1.Model.GitRepoSource.t() | nil,
          :substitutions => map() | nil,
          :tags => list(String.t()) | nil,
          :triggerTemplate => GoogleApi.CloudBuild.V1.Model.RepoSource.t() | nil,
          :webhookConfig => GoogleApi.CloudBuild.V1.Model.WebhookConfig.t() | nil
        }

  field(:approvalConfig, as: GoogleApi.CloudBuild.V1.Model.ApprovalConfig)
  field(:autodetect)
  field(:build, as: GoogleApi.CloudBuild.V1.Model.Build)
  field(:createTime, as: DateTime)
  field(:description)
  field(:disabled)
  field(:filename)
  field(:filter)
  field(:gitFileSource, as: GoogleApi.CloudBuild.V1.Model.GitFileSource)
  field(:github, as: GoogleApi.CloudBuild.V1.Model.GitHubEventsConfig)
  field(:id)
  field(:ignoredFiles, type: :list)
  field(:includedFiles, type: :list)
  field(:name)
  field(:pubsubConfig, as: GoogleApi.CloudBuild.V1.Model.PubsubConfig)
  field(:resourceName)
  field(:serviceAccount)
  field(:sourceToBuild, as: GoogleApi.CloudBuild.V1.Model.GitRepoSource)
  field(:substitutions, type: :map)
  field(:tags, type: :list)
  field(:triggerTemplate, as: GoogleApi.CloudBuild.V1.Model.RepoSource)
  field(:webhookConfig, as: GoogleApi.CloudBuild.V1.Model.WebhookConfig)
end

defimpl Poison.Decoder, for: GoogleApi.CloudBuild.V1.Model.BuildTrigger do
  def decode(value, options) do
    GoogleApi.CloudBuild.V1.Model.BuildTrigger.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudBuild.V1.Model.BuildTrigger do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
