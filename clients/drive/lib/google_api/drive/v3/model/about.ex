# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Drive.V3.Model.About do
  @moduledoc """
  Information about the user, the user's Drive, and system capabilities.

  ## Attributes

  *   `appInstalled` (*type:* `boolean()`, *default:* `nil`) - Whether the user has installed the requesting app.
  *   `canCreateDrives` (*type:* `boolean()`, *default:* `nil`) - Whether the user can create shared drives.
  *   `canCreateTeamDrives` (*type:* `boolean()`, *default:* `nil`) - Deprecated: Use `canCreateDrives` instead.
  *   `driveThemes` (*type:* `list(GoogleApi.Drive.V3.Model.AboutDriveThemes.t)`, *default:* `nil`) - A list of themes that are supported for shared drives.
  *   `exportFormats` (*type:* `map()`, *default:* `nil`) - A map of source MIME type to possible targets for all supported exports.
  *   `folderColorPalette` (*type:* `list(String.t)`, *default:* `nil`) - The currently supported folder colors as RGB hex strings.
  *   `importFormats` (*type:* `map()`, *default:* `nil`) - A map of source MIME type to possible targets for all supported imports.
  *   `kind` (*type:* `String.t`, *default:* `drive#about`) - Identifies what kind of resource this is. Value: the fixed string `"drive#about"`.
  *   `maxImportSizes` (*type:* `map()`, *default:* `nil`) - A map of maximum import sizes by MIME type, in bytes.
  *   `maxUploadSize` (*type:* `String.t`, *default:* `nil`) - The maximum upload size in bytes.
  *   `storageQuota` (*type:* `GoogleApi.Drive.V3.Model.AboutStorageQuota.t`, *default:* `nil`) - The user's storage quota limits and usage. For users that are part of an organization with pooled storage, information about the limit and usage across all services is for the organization, rather than the individual user. All fields are measured in bytes.
  *   `teamDriveThemes` (*type:* `list(GoogleApi.Drive.V3.Model.AboutTeamDriveThemes.t)`, *default:* `nil`) - Deprecated: Use `driveThemes` instead.
  *   `user` (*type:* `GoogleApi.Drive.V3.Model.User.t`, *default:* `nil`) - The authenticated user.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :appInstalled => boolean() | nil,
          :canCreateDrives => boolean() | nil,
          :canCreateTeamDrives => boolean() | nil,
          :driveThemes => list(GoogleApi.Drive.V3.Model.AboutDriveThemes.t()) | nil,
          :exportFormats => map() | nil,
          :folderColorPalette => list(String.t()) | nil,
          :importFormats => map() | nil,
          :kind => String.t() | nil,
          :maxImportSizes => map() | nil,
          :maxUploadSize => String.t() | nil,
          :storageQuota => GoogleApi.Drive.V3.Model.AboutStorageQuota.t() | nil,
          :teamDriveThemes => list(GoogleApi.Drive.V3.Model.AboutTeamDriveThemes.t()) | nil,
          :user => GoogleApi.Drive.V3.Model.User.t() | nil
        }

  field(:appInstalled)
  field(:canCreateDrives)
  field(:canCreateTeamDrives)
  field(:driveThemes, as: GoogleApi.Drive.V3.Model.AboutDriveThemes, type: :list)
  field(:exportFormats, type: :map)
  field(:folderColorPalette, type: :list)
  field(:importFormats, type: :map)
  field(:kind)
  field(:maxImportSizes, type: :map)
  field(:maxUploadSize)
  field(:storageQuota, as: GoogleApi.Drive.V3.Model.AboutStorageQuota)
  field(:teamDriveThemes, as: GoogleApi.Drive.V3.Model.AboutTeamDriveThemes, type: :list)
  field(:user, as: GoogleApi.Drive.V3.Model.User)
end

defimpl Poison.Decoder, for: GoogleApi.Drive.V3.Model.About do
  def decode(value, options) do
    GoogleApi.Drive.V3.Model.About.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Drive.V3.Model.About do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
