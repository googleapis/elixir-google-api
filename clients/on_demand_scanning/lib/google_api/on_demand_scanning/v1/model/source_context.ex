# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.OnDemandScanning.V1.Model.SourceContext do
  @moduledoc """
  A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.

  ## Attributes

  *   `cloudRepo` (*type:* `GoogleApi.OnDemandScanning.V1.Model.CloudRepoSourceContext.t`, *default:* `nil`) - A SourceContext referring to a revision in a Google Cloud Source Repo.
  *   `gerrit` (*type:* `GoogleApi.OnDemandScanning.V1.Model.GerritSourceContext.t`, *default:* `nil`) - A SourceContext referring to a Gerrit project.
  *   `git` (*type:* `GoogleApi.OnDemandScanning.V1.Model.GitSourceContext.t`, *default:* `nil`) - A SourceContext referring to any third party Git repo (e.g., GitHub).
  *   `labels` (*type:* `map()`, *default:* `nil`) - Labels with user defined metadata.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :cloudRepo => GoogleApi.OnDemandScanning.V1.Model.CloudRepoSourceContext.t() | nil,
          :gerrit => GoogleApi.OnDemandScanning.V1.Model.GerritSourceContext.t() | nil,
          :git => GoogleApi.OnDemandScanning.V1.Model.GitSourceContext.t() | nil,
          :labels => map() | nil
        }

  field(:cloudRepo, as: GoogleApi.OnDemandScanning.V1.Model.CloudRepoSourceContext)
  field(:gerrit, as: GoogleApi.OnDemandScanning.V1.Model.GerritSourceContext)
  field(:git, as: GoogleApi.OnDemandScanning.V1.Model.GitSourceContext)
  field(:labels, type: :map)
end

defimpl Poison.Decoder, for: GoogleApi.OnDemandScanning.V1.Model.SourceContext do
  def decode(value, options) do
    GoogleApi.OnDemandScanning.V1.Model.SourceContext.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.OnDemandScanning.V1.Model.SourceContext do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
