# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.SASPortal.V1alpha1.Model.SasPortalDeviceMetadata do
  @moduledoc """
  Device data overridable by both SAS Portal and registration requests.

  ## Attributes

  *   `antennaModel` (*type:* `String.t`, *default:* `nil`) - If populated, the Antenna Model Pattern to use. Format is: RecordCreatorId:PatternId
  *   `commonChannelGroup` (*type:* `String.t`, *default:* `nil`) - CCG. A group of CBSDs in the same ICG requesting a common primary channel assignment. See CBRSA-TS-2001 V3.0.0 for more details.
  *   `interferenceCoordinationGroup` (*type:* `String.t`, *default:* `nil`) - ICG. A group of CBSDs that manage their own interference with the group. See CBRSA-TS-2001 V3.0.0 for more details.
  *   `nrqzValidated` (*type:* `boolean()`, *default:* `nil`) - Output only. Whether a CPI has validated to have coordinated with the National Quiet Zone office.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :antennaModel => String.t() | nil,
          :commonChannelGroup => String.t() | nil,
          :interferenceCoordinationGroup => String.t() | nil,
          :nrqzValidated => boolean() | nil
        }

  field(:antennaModel)
  field(:commonChannelGroup)
  field(:interferenceCoordinationGroup)
  field(:nrqzValidated)
end

defimpl Poison.Decoder, for: GoogleApi.SASPortal.V1alpha1.Model.SasPortalDeviceMetadata do
  def decode(value, options) do
    GoogleApi.SASPortal.V1alpha1.Model.SasPortalDeviceMetadata.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.SASPortal.V1alpha1.Model.SasPortalDeviceMetadata do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
