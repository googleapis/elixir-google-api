# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudDeploy.V1.Model.RouteDestinations do
  @moduledoc """
  Information about route destinations for the Gateway API service mesh.

  ## Attributes

  *   `destinationIds` (*type:* `list(String.t)`, *default:* `nil`) - Required. The clusters where the Gateway API HTTPRoute resource will be deployed to. Valid entries include the associated entities IDs configured in the Target resource and "@self" to include the Target cluster.
  *   `propagateService` (*type:* `boolean()`, *default:* `nil`) - Optional. Whether to propagate the Kubernetes Service to the route destination clusters. The Service will always be deployed to the Target cluster even if the HTTPRoute is not. This option may be used to facilitiate successful DNS lookup in the route destination clusters. Can only be set to true if destinations are specified.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :destinationIds => list(String.t()) | nil,
          :propagateService => boolean() | nil
        }

  field(:destinationIds, type: :list)
  field(:propagateService)
end

defimpl Poison.Decoder, for: GoogleApi.CloudDeploy.V1.Model.RouteDestinations do
  def decode(value, options) do
    GoogleApi.CloudDeploy.V1.Model.RouteDestinations.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudDeploy.V1.Model.RouteDestinations do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
