# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.BigtableAdmin.V2.Model.Type do
  @moduledoc """
  `Type` represents the type of data that is written to, read from, or stored in Bigtable. It is heavily based on the GoogleSQL standard to help maintain familiarity and consistency across products and features. For compatibility with Bigtable's existing untyped APIs, each `Type` includes an `Encoding` which describes how to convert to or from the underlying data. Each encoding can operate in one of two modes: - Sorted: In this mode, Bigtable guarantees that `Encode(X) <= Encode(Y)` if and only if `X <= Y`. This is useful anywhere sort order is important, for example when encoding keys. - Distinct: In this mode, Bigtable guarantees that if `X != Y` then `Encode(X) != Encode(Y)`. However, the converse is not guaranteed. For example, both "{'foo': '1', 'bar': '2'}" and "{'bar': '2', 'foo': '1'}" are valid encodings of the same JSON value. The API clearly documents which mode is used wherever an encoding can be configured. Each encoding also documents which values are supported in which modes. For example, when encoding INT64 as a numeric STRING, negative numbers cannot be encoded in sorted mode. This is because `INT64(1) > INT64(-1)`, but `STRING("-00001") > STRING("00001")`.

  ## Attributes

  *   `aggregateType` (*type:* `GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeAggregate.t`, *default:* `nil`) - Aggregate
  *   `arrayType` (*type:* `GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeArray.t`, *default:* `nil`) - Array
  *   `boolType` (*type:* `GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeBool.t`, *default:* `nil`) - Bool
  *   `bytesType` (*type:* `GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeBytes.t`, *default:* `nil`) - Bytes
  *   `dateType` (*type:* `GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeDate.t`, *default:* `nil`) - Date
  *   `float32Type` (*type:* `GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeFloat32.t`, *default:* `nil`) - Float32
  *   `float64Type` (*type:* `GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeFloat64.t`, *default:* `nil`) - Float64
  *   `int64Type` (*type:* `GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeInt64.t`, *default:* `nil`) - Int64
  *   `mapType` (*type:* `GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeMap.t`, *default:* `nil`) - Map
  *   `stringType` (*type:* `GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeString.t`, *default:* `nil`) - String
  *   `structType` (*type:* `GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeStruct.t`, *default:* `nil`) - Struct
  *   `timestampType` (*type:* `GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeTimestamp.t`, *default:* `nil`) - Timestamp
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :aggregateType =>
            GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeAggregate.t() | nil,
          :arrayType => GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeArray.t() | nil,
          :boolType => GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeBool.t() | nil,
          :bytesType => GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeBytes.t() | nil,
          :dateType => GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeDate.t() | nil,
          :float32Type =>
            GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeFloat32.t() | nil,
          :float64Type =>
            GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeFloat64.t() | nil,
          :int64Type => GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeInt64.t() | nil,
          :mapType => GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeMap.t() | nil,
          :stringType =>
            GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeString.t() | nil,
          :structType =>
            GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeStruct.t() | nil,
          :timestampType =>
            GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeTimestamp.t() | nil
        }

  field(:aggregateType, as: GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeAggregate)
  field(:arrayType, as: GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeArray)
  field(:boolType, as: GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeBool)
  field(:bytesType, as: GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeBytes)
  field(:dateType, as: GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeDate)
  field(:float32Type, as: GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeFloat32)
  field(:float64Type, as: GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeFloat64)
  field(:int64Type, as: GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeInt64)
  field(:mapType, as: GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeMap)
  field(:stringType, as: GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeString)
  field(:structType, as: GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeStruct)
  field(:timestampType, as: GoogleApi.BigtableAdmin.V2.Model.GoogleBigtableAdminV2TypeTimestamp)
end

defimpl Poison.Decoder, for: GoogleApi.BigtableAdmin.V2.Model.Type do
  def decode(value, options) do
    GoogleApi.BigtableAdmin.V2.Model.Type.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.BigtableAdmin.V2.Model.Type do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
