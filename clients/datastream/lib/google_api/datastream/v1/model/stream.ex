# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Datastream.V1.Model.Stream do
  @moduledoc """
  A resource representing streaming data from a source to a destination.

  ## Attributes

  *   `backfillAll` (*type:* `GoogleApi.Datastream.V1.Model.BackfillAllStrategy.t`, *default:* `nil`) - Automatically backfill objects included in the stream source configuration. Specific objects can be excluded.
  *   `backfillNone` (*type:* `GoogleApi.Datastream.V1.Model.BackfillNoneStrategy.t`, *default:* `nil`) - Do not automatically backfill any objects.
  *   `createTime` (*type:* `DateTime.t`, *default:* `nil`) - Output only. The creation time of the stream.
  *   `customerManagedEncryptionKey` (*type:* `String.t`, *default:* `nil`) - Immutable. A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
  *   `destinationConfig` (*type:* `GoogleApi.Datastream.V1.Model.DestinationConfig.t`, *default:* `nil`) - Required. Destination connection profile configuration.
  *   `displayName` (*type:* `String.t`, *default:* `nil`) - Required. Display name.
  *   `errors` (*type:* `list(GoogleApi.Datastream.V1.Model.Error.t)`, *default:* `nil`) - Output only. Errors on the Stream.
  *   `labels` (*type:* `map()`, *default:* `nil`) - Labels.
  *   `lastRecoveryTime` (*type:* `DateTime.t`, *default:* `nil`) - Output only. If the stream was recovered, the time of the last recovery. Note: This field is currently experimental.
  *   `name` (*type:* `String.t`, *default:* `nil`) - Output only. Identifier. The stream's name.
  *   `sourceConfig` (*type:* `GoogleApi.Datastream.V1.Model.SourceConfig.t`, *default:* `nil`) - Required. Source connection profile configuration.
  *   `state` (*type:* `String.t`, *default:* `nil`) - The state of the stream.
  *   `updateTime` (*type:* `DateTime.t`, *default:* `nil`) - Output only. The last update time of the stream.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :backfillAll => GoogleApi.Datastream.V1.Model.BackfillAllStrategy.t() | nil,
          :backfillNone => GoogleApi.Datastream.V1.Model.BackfillNoneStrategy.t() | nil,
          :createTime => DateTime.t() | nil,
          :customerManagedEncryptionKey => String.t() | nil,
          :destinationConfig => GoogleApi.Datastream.V1.Model.DestinationConfig.t() | nil,
          :displayName => String.t() | nil,
          :errors => list(GoogleApi.Datastream.V1.Model.Error.t()) | nil,
          :labels => map() | nil,
          :lastRecoveryTime => DateTime.t() | nil,
          :name => String.t() | nil,
          :sourceConfig => GoogleApi.Datastream.V1.Model.SourceConfig.t() | nil,
          :state => String.t() | nil,
          :updateTime => DateTime.t() | nil
        }

  field(:backfillAll, as: GoogleApi.Datastream.V1.Model.BackfillAllStrategy)
  field(:backfillNone, as: GoogleApi.Datastream.V1.Model.BackfillNoneStrategy)
  field(:createTime, as: DateTime)
  field(:customerManagedEncryptionKey)
  field(:destinationConfig, as: GoogleApi.Datastream.V1.Model.DestinationConfig)
  field(:displayName)
  field(:errors, as: GoogleApi.Datastream.V1.Model.Error, type: :list)
  field(:labels, type: :map)
  field(:lastRecoveryTime, as: DateTime)
  field(:name)
  field(:sourceConfig, as: GoogleApi.Datastream.V1.Model.SourceConfig)
  field(:state)
  field(:updateTime, as: DateTime)
end

defimpl Poison.Decoder, for: GoogleApi.Datastream.V1.Model.Stream do
  def decode(value, options) do
    GoogleApi.Datastream.V1.Model.Stream.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Datastream.V1.Model.Stream do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
