# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Datastream.V1.Model.UserCredentials do
  @moduledoc """
  Username-password credentials.

  ## Attributes

  *   `password` (*type:* `String.t`, *default:* `nil`) - Optional. Password for the Salesforce connection. Mutually exclusive with the `secret_manager_stored_password` field.
  *   `secretManagerStoredPassword` (*type:* `String.t`, *default:* `nil`) - Optional. A reference to a Secret Manager resource name storing the Salesforce connection's password. Mutually exclusive with the `password` field.
  *   `secretManagerStoredSecurityToken` (*type:* `String.t`, *default:* `nil`) - Optional. A reference to a Secret Manager resource name storing the Salesforce connection's security token. Mutually exclusive with the `security_token` field.
  *   `securityToken` (*type:* `String.t`, *default:* `nil`) - Optional. Security token for the Salesforce connection. Mutually exclusive with the `secret_manager_stored_security_token` field.
  *   `username` (*type:* `String.t`, *default:* `nil`) - Required. Username for the Salesforce connection.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :password => String.t() | nil,
          :secretManagerStoredPassword => String.t() | nil,
          :secretManagerStoredSecurityToken => String.t() | nil,
          :securityToken => String.t() | nil,
          :username => String.t() | nil
        }

  field(:password)
  field(:secretManagerStoredPassword)
  field(:secretManagerStoredSecurityToken)
  field(:securityToken)
  field(:username)
end

defimpl Poison.Decoder, for: GoogleApi.Datastream.V1.Model.UserCredentials do
  def decode(value, options) do
    GoogleApi.Datastream.V1.Model.UserCredentials.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Datastream.V1.Model.UserCredentials do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
