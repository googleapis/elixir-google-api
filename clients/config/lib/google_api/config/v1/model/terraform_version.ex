# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Config.V1.Model.TerraformVersion do
  @moduledoc """
  A TerraformVersion represents the support state the corresponding Terraform version.

  ## Attributes

  *   `deprecateTime` (*type:* `DateTime.t`, *default:* `nil`) - Output only. When the version is deprecated.
  *   `name` (*type:* `String.t`, *default:* `nil`) - Identifier. The version name is in the format: 'projects/{project_id}/locations/{location}/terraformVersions/{terraform_version}'.
  *   `obsoleteTime` (*type:* `DateTime.t`, *default:* `nil`) - Output only. When the version is obsolete.
  *   `state` (*type:* `String.t`, *default:* `nil`) - Output only. The state of the version, ACTIVE, DEPRECATED or OBSOLETE.
  *   `supportTime` (*type:* `DateTime.t`, *default:* `nil`) - Output only. When the version is supported.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :deprecateTime => DateTime.t() | nil,
          :name => String.t() | nil,
          :obsoleteTime => DateTime.t() | nil,
          :state => String.t() | nil,
          :supportTime => DateTime.t() | nil
        }

  field(:deprecateTime, as: DateTime)
  field(:name)
  field(:obsoleteTime, as: DateTime)
  field(:state)
  field(:supportTime, as: DateTime)
end

defimpl Poison.Decoder, for: GoogleApi.Config.V1.Model.TerraformVersion do
  def decode(value, options) do
    GoogleApi.Config.V1.Model.TerraformVersion.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Config.V1.Model.TerraformVersion do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
