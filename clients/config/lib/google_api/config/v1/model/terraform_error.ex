# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Config.V1.Model.TerraformError do
  @moduledoc """
  Errors encountered during actuation using Terraform

  ## Attributes

  *   `error` (*type:* `GoogleApi.Config.V1.Model.Status.t`, *default:* `nil`) - Original error response from underlying Google API, if available.
  *   `errorDescription` (*type:* `String.t`, *default:* `nil`) - A human-readable error description.
  *   `httpResponseCode` (*type:* `integer()`, *default:* `nil`) - HTTP response code returned from Google Cloud Platform APIs when Terraform fails to provision the resource. If unset or 0, no HTTP response code was returned by Terraform.
  *   `resourceAddress` (*type:* `String.t`, *default:* `nil`) - Address of the resource associated with the error, e.g. `google_compute_network.vpc_network`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :error => GoogleApi.Config.V1.Model.Status.t() | nil,
          :errorDescription => String.t() | nil,
          :httpResponseCode => integer() | nil,
          :resourceAddress => String.t() | nil
        }

  field(:error, as: GoogleApi.Config.V1.Model.Status)
  field(:errorDescription)
  field(:httpResponseCode)
  field(:resourceAddress)
end

defimpl Poison.Decoder, for: GoogleApi.Config.V1.Model.TerraformError do
  def decode(value, options) do
    GoogleApi.Config.V1.Model.TerraformError.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Config.V1.Model.TerraformError do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
