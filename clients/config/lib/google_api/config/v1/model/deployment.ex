# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Config.V1.Model.Deployment do
  @moduledoc """
  A Deployment is a group of resources and configs managed and provisioned by Infra Manager.

  ## Attributes

  *   `annotations` (*type:* `map()`, *default:* `nil`) - Optional. Arbitrary key-value metadata storage e.g. to help client tools identify deployments during automation. See https://google.aip.dev/148#annotations for details on format and size limitations.
  *   `artifactsGcsBucket` (*type:* `String.t`, *default:* `nil`) - Optional. User-defined location of Cloud Build logs and artifacts in Google Cloud Storage. Format: `gs://{bucket}/{folder}` A default bucket will be bootstrapped if the field is not set or empty. Default bucket format: `gs://--blueprint-config` Constraints: - The bucket needs to be in the same project as the deployment - The path cannot be within the path of `gcs_source` - The field cannot be updated, including changing its presence
  *   `createTime` (*type:* `DateTime.t`, *default:* `nil`) - Output only. Time when the deployment was created.
  *   `deleteBuild` (*type:* `String.t`, *default:* `nil`) - Output only. Cloud Build instance UUID associated with deleting this deployment.
  *   `deleteLogs` (*type:* `String.t`, *default:* `nil`) - Output only. Location of Cloud Build logs in Google Cloud Storage, populated when deleting this deployment. Format: `gs://{bucket}/{object}`.
  *   `deleteResults` (*type:* `GoogleApi.Config.V1.Model.ApplyResults.t`, *default:* `nil`) - Output only. Location of artifacts from a DeleteDeployment operation.
  *   `errorCode` (*type:* `String.t`, *default:* `nil`) - Output only. Error code describing errors that may have occurred.
  *   `errorLogs` (*type:* `String.t`, *default:* `nil`) - Output only. Location of Terraform error logs in Google Cloud Storage. Format: `gs://{bucket}/{object}`.
  *   `importExistingResources` (*type:* `boolean()`, *default:* `nil`) - By default, Infra Manager will return a failure when Terraform encounters a 409 code (resource conflict error) during actuation. If this flag is set to true, Infra Manager will instead attempt to automatically import the resource into the Terraform state (for supported resource types) and continue actuation. Not all resource types are supported, refer to documentation.
  *   `labels` (*type:* `map()`, *default:* `nil`) - User-defined metadata for the deployment.
  *   `latestRevision` (*type:* `String.t`, *default:* `nil`) - Output only. Revision name that was most recently applied. Format: `projects/{project}/locations/{location}/deployments/{deployment}/ revisions/{revision}`
  *   `lockState` (*type:* `String.t`, *default:* `nil`) - Output only. Current lock state of the deployment.
  *   `name` (*type:* `String.t`, *default:* `nil`) - Resource name of the deployment. Format: `projects/{project}/locations/{location}/deployments/{deployment}`
  *   `quotaValidation` (*type:* `String.t`, *default:* `nil`) - Optional. Input to control quota checks for resources in terraform configuration files. There are limited resources on which quota validation applies.
  *   `serviceAccount` (*type:* `String.t`, *default:* `nil`) - Optional. User-specified Service Account (SA) credentials to be used when actuating resources. Format: `projects/{projectID}/serviceAccounts/{serviceAccount}`
  *   `state` (*type:* `String.t`, *default:* `nil`) - Output only. Current state of the deployment.
  *   `stateDetail` (*type:* `String.t`, *default:* `nil`) - Output only. Additional information regarding the current state.
  *   `terraformBlueprint` (*type:* `GoogleApi.Config.V1.Model.TerraformBlueprint.t`, *default:* `nil`) - A blueprint described using Terraform's HashiCorp Configuration Language as a root module.
  *   `tfErrors` (*type:* `list(GoogleApi.Config.V1.Model.TerraformError.t)`, *default:* `nil`) - Output only. Errors encountered when deleting this deployment. Errors are truncated to 10 entries, see `delete_results` and `error_logs` for full details.
  *   `tfVersion` (*type:* `String.t`, *default:* `nil`) - Output only. The current Terraform version set on the deployment. It is in the format of "Major.Minor.Patch", for example, "1.3.10".
  *   `tfVersionConstraint` (*type:* `String.t`, *default:* `nil`) - Optional. The user-specified Terraform version constraint. Example: "=1.3.10".
  *   `updateTime` (*type:* `DateTime.t`, *default:* `nil`) - Output only. Time when the deployment was last modified.
  *   `workerPool` (*type:* `String.t`, *default:* `nil`) - Optional. The user-specified Cloud Build worker pool resource in which the Cloud Build job will execute. Format: `projects/{project}/locations/{location}/workerPools/{workerPoolId}`. If this field is unspecified, the default Cloud Build worker pool will be used.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :annotations => map() | nil,
          :artifactsGcsBucket => String.t() | nil,
          :createTime => DateTime.t() | nil,
          :deleteBuild => String.t() | nil,
          :deleteLogs => String.t() | nil,
          :deleteResults => GoogleApi.Config.V1.Model.ApplyResults.t() | nil,
          :errorCode => String.t() | nil,
          :errorLogs => String.t() | nil,
          :importExistingResources => boolean() | nil,
          :labels => map() | nil,
          :latestRevision => String.t() | nil,
          :lockState => String.t() | nil,
          :name => String.t() | nil,
          :quotaValidation => String.t() | nil,
          :serviceAccount => String.t() | nil,
          :state => String.t() | nil,
          :stateDetail => String.t() | nil,
          :terraformBlueprint => GoogleApi.Config.V1.Model.TerraformBlueprint.t() | nil,
          :tfErrors => list(GoogleApi.Config.V1.Model.TerraformError.t()) | nil,
          :tfVersion => String.t() | nil,
          :tfVersionConstraint => String.t() | nil,
          :updateTime => DateTime.t() | nil,
          :workerPool => String.t() | nil
        }

  field(:annotations, type: :map)
  field(:artifactsGcsBucket)
  field(:createTime, as: DateTime)
  field(:deleteBuild)
  field(:deleteLogs)
  field(:deleteResults, as: GoogleApi.Config.V1.Model.ApplyResults)
  field(:errorCode)
  field(:errorLogs)
  field(:importExistingResources)
  field(:labels, type: :map)
  field(:latestRevision)
  field(:lockState)
  field(:name)
  field(:quotaValidation)
  field(:serviceAccount)
  field(:state)
  field(:stateDetail)
  field(:terraformBlueprint, as: GoogleApi.Config.V1.Model.TerraformBlueprint)
  field(:tfErrors, as: GoogleApi.Config.V1.Model.TerraformError, type: :list)
  field(:tfVersion)
  field(:tfVersionConstraint)
  field(:updateTime, as: DateTime)
  field(:workerPool)
end

defimpl Poison.Decoder, for: GoogleApi.Config.V1.Model.Deployment do
  def decode(value, options) do
    GoogleApi.Config.V1.Model.Deployment.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Config.V1.Model.Deployment do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
